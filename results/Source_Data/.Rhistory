# setup
rm(list=ls(all=TRUE))
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
# if packages are not installed, install. then, load libraries.
list_of_packages <- c("ggplot2", "tidyverse", "dplyr", "latex2exp", "readxl", "gridExtra", "cowplot")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
lapply(list_of_packages, require, character.only = TRUE)
# figure parameters
line_size <- 1
point_size <- 5
point_stroke <- 0.55
n_sem <- 1 # how many standard errors do we want the error bars to include?
# generate themes
theme <- theme(plot.title = element_text(hjust = 0.5, size = 28),
text = element_text(size=20,family="Helvetica"),
axis.title = element_text(size = 24),
axis.text = element_text(size = 21, color = "black"),
legend.position = "top",
legend.title = element_blank(),
legend.spacing.x = unit(0.2,'cm'),
axis.line = element_line(size = 1),
axis.ticks = element_blank(),
aspect.ratio = 2/3)
point_plot_theme <- theme(strip.background=element_blank(),
panel.spacing.x=unit(1,"line"),
axis.line=element_blank(), aspect.ratio=1) +
panel_border(colour="black", size=2, linetype=1, remove=FALSE)
sheets <- readxl::excel_sheets("Source_Data.xlsx")
read_as_text_sheets <- c("table2", "table5", "table6")
source_data <- lapply(sheets, function(x) if (x %in% read_as_text_sheets) {read_excel("Source_Data.xlsx", sheet = x, col_types="text")} else {read_excel("Source_Data.xlsx", sheet = x)})
names(source_data) <- sheets
source_data$table2[,2:9]
source_data$table2[,2:9] <- as.numeric(unlist(source_data$table2[,2:9]))
source_data$table5[,2:7] <- as.numeric(unlist(source_data$table5[,2:7]))
source_data$table6[,2:7] <- as.numeric(unlist(source_data$table6[,2:7]))
p2_1 <- ggplot(source_data$fig2a %>% mutate(condition=NaN), aes(x=`pair type`,y=`p(select S+)`)) +
stat_summary_bin(aes(y=`p(select S+)`), fun.y="mean", geom="bar", binwidth=0.2,
position=position_dodge(width=1), fill="grey") +
geom_point(aes(color=factor(condition)), position=position_jitterdodge(dodge.width=1, jitter.width=0.1),
fill="white", shape=21, stroke=point_stroke, size=point_size) +
scale_color_manual(values="black") +
stat_summary(fun.data=mean_se, fun.args = list(mult=n_sem), geom="errorbar", width=0.1, size=0.9,
position=position_nudge(0.2), color="black") + # "turquoise4"
geom_hline(yintercept=0.5, size=line_size, linetype="dashed") +
scale_y_continuous(expand=c(0,0), breaks=c(0,0.5,1), limits=c(0,1.02)) +
theme +
theme(axis.title.x=element_blank(),
legend.position="none" ,
aspect.ratio=2.5/2,
plot.title = element_text(margin=margin(0,0,30,0))) +
labs(y="p(select S+)", title="Final Decisions Choices")
p2_2 <- ggplot(source_data$fig2b, aes(y=median,x=`normalized delta ratings`,group=`pair type`)) +
geom_ribbon(aes(ymin=lower, ymax=upper), fill="#E9E9E9") +
geom_line(aes(y=median, linetype=`pair type`), colour="black", size=line_size*1.5) +
geom_hline(yintercept=0.5, size=line_size, linetype="dashed") +
geom_vline(xintercept=0, size=line_size, linetype="dashed") +
scale_y_continuous(expand=c(0,0), breaks=c(0,0.5,1), limits=c(0,1.025)) +
scale_x_continuous(expand=c(0,0)) +
scale_linetype_manual(values=c("longdash", "solid")) +
theme + point_plot_theme +
theme(legend.position="none",
plot.title = element_text(margin=margin(0,0,30,0))) +
labs(y="Predicted p(select S+)",
x="Normalized \u0394ratings (S+ - S0)",
title="Choice model predictions")
p2_3 <- ggplot(source_data$fig2c, aes(y = `p(estimate as S+)`, x = `pair type`)) +
stat_summary_bin(aes(y=`p(estimate as S+)`, fill=`actual reward`), fun.y="mean", geom="bar", binwidth=0.2,
position=position_dodge(width=1)) +
stat_summary(aes(color=`actual reward`, x=`pair type`),
fun.data=mean_se, fun.args = list(mult=1),
geom="errorbar", width=0.2, size=0.9, position=position_dodge(width=1)) +
geom_point(aes(color=`actual reward`, x=`pair type`),
position=position_jitterdodge(dodge.width=1, jitter.width=0.1, jitter.height=0.01),
shape=21, stroke=point_stroke, size=2, fill="white") +
geom_hline(yintercept=0.5, linetype="dashed", size=line_size) +
scale_y_continuous(expand=c(0,0), breaks=c(0,0.5,1), limits=c(-0.03,1.05)) +
theme +
labs(y="p(estimate as S+)", title="Outcome Estimation") +
theme(
legend.position = c(.82, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.text=element_text(size=18),
axis.title.x=element_blank(),
aspect.ratio=2.2/2,
plot.title = element_text(margin=margin(0,0,30,0))) +
#scale_color_manual(values=c("#B34E00", "#36875F")) +
scale_color_manual(values=c("#9E4908", "#246B47")) +
scale_fill_manual(values=c("#D55E00","#54B082")) +
scale_x_discrete(breaks = c("Chosen", "Unchosen"),
labels = c(expression(S[chosen]), expression(S[unchosen])))
p2_4 <- ggplot(source_data$fig2d_points,
aes(y=`p(select S+) - 0.5`,x=`inverse estimation score`)) + #, color=factor(choice_centered)) +
geom_point(size=point_size, fill="white", shape=21, stroke=point_stroke) +
theme +
point_plot_theme +
geom_ribbon(data = source_data$fig2d_fit, aes(ymin=lower, ymax=upper), fill="#E9E9E9")+
geom_line(data = source_data$fig2d_fit, aes(y=median), size=line_size*1.5) +
geom_hline(yintercept=0, size=line_size, linetype="dashed") +
geom_vline(xintercept=0, size=line_size,  linetype="dashed") +
scale_y_continuous(expand=c(0,0),  breaks=c(-0.5,0,0.5), limits=c(-0.55,0.55)) +
scale_x_continuous(expand=c(0,0), breaks=c(-1, 0, 1), limits=c(-1.05, 1.05)) +
theme(legend.position="none", plot.title = element_text(margin=margin(0,0,30,0))) +
labs(y="p(select S+) - 0.5",
x="Inverse estimation score",
#x=expression(atop("Inverse estimation score","p(estimate S+ as S+) - p(estimate S0 as S+)")),
title="Decision bias and outcome estimations")
figure2 <- plot_grid(p2_1,p2_2,p2_3,p2_4,
ncol=2,nrow=2,
axis="bt",
align="v",
labels=c("a","b","c","d"),
label_size = 30,
label_fontfamily = "Helvetica")
figure2
p3_1 <- ggplot(source_data$fig3a_points, aes(y=`inverse decision bias`,x=`pairs memory`)) +
geom_point(size=point_size, fill="white", shape=21, stroke=point_stroke) +
theme +
point_plot_theme +
geom_ribbon(data = source_data$fig3a_fit,
aes(ymin=lower, ymax=upper), fill="#DFEBE9") +
# geom_ribbon(data = mutate(coefs_pair_acc_bias_Exp1$predicted_summary_list[[1]], bias_diff=median),
#             aes(ymin=lower, ymax=upper), fill="#DFEBE9") +
geom_line(aes(y=median), data=source_data$fig3a_fit,
colour="turquoise4", size=line_size*1.5) +
geom_hline(yintercept=0, size=line_size, linetype="dashed") +
geom_vline(xintercept=0.5, size=line_size,  linetype="dashed") +
scale_y_continuous(expand=c(0,0),  breaks=c(-1,0,1), limits=c(-1.025,1.025)) +
scale_x_continuous(expand=c(0,0), breaks=c(0, 0.5, 1), limits=c(-0.025, 1.025)) +
theme(legend.position="none", plot.title = element_text(margin=margin(0,0,30,0))) +
labs(y=expression(atop("Inverse decision bias","p(select "*S[chosen]*"+) - p(select "*S[unchosen]*"+)")),
x="Pairs memory (accuracy)",
title="Between participants")
# pairs accuracy per deliberation pair
p3_2 <- ggplot(source_data$fig3b %>% mutate(condition=NaN),
aes(x=`deliberation pair`,y=`pairs memory`)) +
stat_summary_bin(aes(y=`pairs memory`), fun.y="mean", geom="bar", binwidth=0.2,
position=position_dodge(width=1), fill="grey") +
geom_point(aes(color=factor(condition)), position=position_jitterdodge(dodge.width=1, jitter.width=0.1),
fill="white", shape=21, stroke=point_stroke, size=point_size) +
scale_color_manual(values="black") +
stat_summary(fun.data=mean_se, fun.args = list(mult=n_sem), geom="errorbar",  width=0.1, size=1,
position=position_nudge(0.2), color="turquoise4") +
geom_hline(yintercept=0.5, size=line_size, linetype="dashed") +
scale_y_continuous(expand=c(0,0),  breaks=c(0,0.5,1), limits=c(0,1.025)) +
theme +
theme(legend.position="none",
aspect.ratio=3/2,
plot.title = element_text(margin=margin(0,0,30,0))) +
labs(x = "Type of deliberation pairs",
y="Pairs memory (accuracy)",
title="Within participants")
figure3 <- plot_grid(p3_1,p3_2,
ncol=2,
axis="bt",
align="v",
labels=c("a","b"),
label_size = 30,
label_fontfamily = "Helvetica",
rel_widths = c(1,0.8))
figure3
plot_grid(p3_1,p3_2,
ncol=2,
axis="bt",
align="v",
labels=c("a","b"),
label_size = 30,
label_fontfamily = "Helvetica",
rel_widths = c(1,0.8))
plot_grid(p3_1,p3_2,
ncol=2,
axis="bt",
align="v",
labels=c("a","b"),
label_size = 30,
label_fontfamily = "Helvetica",
rel_widths = c(1,0.8))
color1 <- "#3FAFAB"; color2 <- "#DFA214"; color3 <- "black"
fillcolor1 <- "#73D2BC"; fillcolor2 <- "#FFCC33"; fillcolor3 <- "#C1C1C1"
p4_1 <- ggplot(source_data$fig4a %>% mutate(nudge = ifelse(Exp %in% c("Pilot", "Exp1"), 0.2, 0.125)),
aes(x=`pair type`,y=`p(select S+)`,color=condition)) +
stat_summary_bin(aes(y=`p(select S+)`, fill=condition), fun.y="mean", color=NA,
geom="bar", binwidth=0.15, position=position_dodge(width=1)) +
geom_point(aes(group=condition), position=position_jitterdodge(dodge.width=1, jitter.width=0.1, jitter.height=0),
fill="white", shape=21, stroke=0.4, size=2) +
scale_color_manual(values=c(color1, color2, color3)) +
scale_fill_manual(values=c(fillcolor1, fillcolor2, fillcolor3)) +
stat_summary(aes(group=condition, x=as.numeric(as.factor(`pair type`))+nudge),
fun.data=mean_se, fun.args = list(mult=n_sem),
geom="errorbar", width=0.15, size=0.7, position=position_dodge(width=1)) +
geom_hline(yintercept=0.5, size=line_size, linetype="dashed") +
scale_y_continuous(expand=c(0,0), breaks=c(0,0.5,1), limits=c(0,1.05)) +
theme +
theme(legend.position = "none",
axis.title.x=element_blank(),
aspect.ratio=3/2,
strip.background = element_rect(colour=NA, fill=NA),
panel.spacing = unit(4, "lines"),
plot.title = element_text(margin=margin(0,0,30,0), hjust = 0.5, size = 30),
text = element_text(size=26,family="Helvetica"),
axis.title = element_text(size = 24),
axis.text = element_text(size = 22, color = "black")) +
scale_x_discrete(breaks = c("Chosen","Unchosen"),
labels = c("Chosen" = expression(S[chosen]),
"Unchosen" = expression(S[unchosen]))) +
labs(y="p(select S+)", title="Inverse decision bias") +
facet_wrap(.~Exp,
ncol=5,
labeller = labeller(Exp = c(Pilot="Pilot\n", Exp1="Experiment 1\n", Exp2="Experiment 2\n",
Exp3="Experiment 3\n", Exp4="Experiment 4\n")))
p4_2 <- ggplot(source_data$fig4b_points, aes(y=`inverse decision bias`, x=`pairs memory`)) +
geom_hline(yintercept=0, size=line_size, linetype="dashed") +
geom_vline(xintercept=0.5, size=line_size, linetype="dashed") +
geom_point(size=point_size-2.5, shape=21, fill="white", stroke=point_stroke, aes(color=condition)) +
theme + point_plot_theme +
geom_ribbon(data = source_data$fig4b_fit,
aes(ymin=lower, ymax=upper, fill=condition), alpha=0.6) +
geom_line(aes(y=median,color=condition), data=source_data$fig4b_fit, size=line_size*1.5) +
scale_color_manual(values=c(color1, color2, color3)) +
scale_fill_manual(values=c(fillcolor1, fillcolor2, fillcolor3)) +
scale_y_continuous(expand=c(0,0), breaks=c(-1,0,1), limits=c(-1.025,1.025)) +
scale_x_continuous(expand=c(0,0), breaks=c(0, 0.5, 1), limits=c(-0.025, 1.025)) +
theme(legend.position = "none",
plot.title = element_text(margin=margin(0,0,30,0), hjust = 0.5, size = 28),
text = element_text(size=26,family="Helvetica"),
axis.title = element_text(size = 24),
axis.text = element_text(size = 20, color = "black")) +
labs(y="Inverse decision bias",
x="Pairs memory",
title="Associative memory and inverse decision bias") +
#geom_text(data=memory_group_fits_text, mapping=aes(x=x, y=y, label=text, color=condition),size=7) +
facet_wrap(.~Exp,
ncol=5,
labeller = labeller(Exp = c(Pilot="Pilot\n", Exp1="Experiment 1\n", Exp2="Experiment 2\n",
Exp3="Experiment 3\n", Exp4="Experiment 4\n")))
figure4 <- plot_grid(p4_1, p4_2,
nrow=2,
axis="bt",
labels=c("a","b"),
label_size = 30,
label_fontfamily = "Helvetica")
# ======================
# Supplementary Figure 1
# ======================
ps_1 <- ggplot(source_data$supp_fig1a %>% mutate(condition=NaN),
aes(x=`pair type` ,y=rt)) +
stat_summary_bin(aes(y=rt), fun.y="mean", geom="bar", binwidth=0.2,
position=position_dodge(width=1), fill="grey") +
geom_point(aes(color=factor(condition)), position=position_jitterdodge(dodge.width=1, jitter.width=0.1),
fill="white", shape=21, stroke=point_stroke, size=point_size) +
scale_color_manual(values="black") +
stat_summary(fun.data=mean_se, fun.args = list(mult=n_sem), geom="errorbar",  width=0.1, size=1,
position=position_nudge(0.2), color="black") +
theme +
scale_y_continuous(expand=c(0,0), limits=c(0, max(source_data$supp_fig1a$rt + 0.1)), breaks=c(0,0.5,1, 1.5)) +
theme(legend.position="none",
aspect.ratio=3/2,
plot.title = element_text(margin=margin(0,0,30,0))) +
labs(x = "Pair type",
y="Reaction times (sec)",
title="RT in Final Decisions")
# model fit
ps_2 <- ggplot(source_data$supp_fig1b, aes(x=`zscored rt`,y=`predicted p(select S+)`,group=`pair type`)) +
geom_ribbon(aes(ymin=lower, ymax=upper), fill="#E9E9E9") +
geom_line(aes(y=median, linetype=`pair type`), colour="black", size=line_size*1.5) +
geom_hline(yintercept=0.5, size=line_size, linetype="dashed") +
geom_vline(xintercept=0, size=line_size, linetype="dashed") +
scale_y_continuous(expand=c(0,0), breaks=c(0,0.5,1), limits=c(0,1.025)) +
scale_x_continuous(expand=c(0,0)) +
scale_linetype_manual(values=c("longdash", "solid")) +
theme + point_plot_theme +
theme(legend.position="none",
plot.title = element_text(margin=margin(0,0,30,0))) +
#geom_text(rt_model_text,mapping=aes(x=x, y=y, group=choice, label=text), size=7) +
labs(y="Predicted p(select S+)",
x="Reaction times (z-scored)",
title="Choices and RTs in Final Decisions")
supp_figure1 <- plot_grid(ps_1,ps_2,
ncol=2,
axis="bt",
align="v",
labels=c("a","b"),
label_size = 30,
label_fontfamily = "Helvetica",
rel_widths = c(0.8,1))
supp_figure1
figure4
plot_grid(p4_1, p4_2,
nrow=2,
axis="bt",
labels=c("a","b"),
label_size = 30,
label_fontfamily = "Helvetica")
plot_grid(p4_1, p4_2,
nrow=2,
axis="bt",
labels=c("a","b"),
label_size = 30,
label_fontfamily = "Helvetica")
plot_grid(p4_1, p4_2,
nrow=2,
axis="bt",
labels=c("a","b"),
label_size = 30,
label_fontfamily = "Helvetica")
plot_grid(p4_1, p4_2,
nrow=2,
axis="bt",
labels=c("a","b"),
label_size = 30,
label_fontfamily = "Helvetica")
create_table <- function(source_table, is_posterior_draw, is_condition){
if (is_condition==1){
group_vars = c("Experiment", "Condition")
} else {
group_vars = c("Experiment")
}
if (is_posterior_draw!=1){
table <- source_table %>%
gather(key="statistic", value="value", `p(select S+)`:`Choice Memory`) %>%
group_by(Experiment, `Pair Type`, Condition, statistic) %>%
dplyr::summarize(mean = mean(value, na.rm=1),
se = sd(value, na.rm=1)/sqrt(n()),
text = sprintf("%.2f \u00b1 %.2f",mean, se)) %>%
select(-c(mean, se)) %>%
spread(statistic, text) %>%
spread(`Pair Type`, `p(select S+)`) %>%
rename(`S+ Selection (Chosen pairs)` = Chosen, `S+ Selection (Unchosen pairs)` = Unchosen) %>%
subset(select = c("Experiment", "Condition", "S+ Selection (Chosen pairs)", "S+ Selection (Unchosen pairs)",
"Pairs Memory", "Choice Memory"))
} else {
table <- source_table %>%
gather(key="coef", value="value", -group_vars) %>%
group_by_at(vars(c(group_vars, "coef"))) %>%
subset(!is.na(value)) %>%
dplyr::summarize(median = median(value, na.rm=1),
high95 = posterior_interval(as.matrix(value), na.rm=1, prob=0.95)[2],
low95 = posterior_interval(as.matrix(value), na.rm=1, prob=0.95)[1]) %>%
mutate(sig = ifelse((low95>0 & high95>0) | (low95<0 & high95<0),"*",""),
text = sprintf("%.2f [%.2f %.2f]%s",median, low95, high95, sig)) %>%
select(-c(median, high95, low95, sig)) %>%
spread(coef, text) %>%
subset(select = colnames(source_table))
}
return(table)
}
supp_table1 <- create_table(source_data$table1, 0, 0)
supp_table2 <- create_table(source_data$table2, 1, 0)
supp_table3 <- create_table(source_data$table3, 1, 1)
supp_table4 <- create_table(source_data$table4, 1, 0)
supp_table5 <- create_table(source_data$table5, 1, 0)
supp_table6 <- create_table(source_data$table6, 1, 0)
list_of_packages <- c("ggplot2", "tidyverse", "dplyr", "latex2exp", "readxl", "gridExtra", "cowplot", "rstanarm")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
lapply(list_of_packages, require, character.only = TRUE)
create_table <- function(source_table, is_posterior_draw, is_condition){
if (is_condition==1){
group_vars = c("Experiment", "Condition")
} else {
group_vars = c("Experiment")
}
if (is_posterior_draw!=1){
table <- source_table %>%
gather(key="statistic", value="value", `p(select S+)`:`Choice Memory`) %>%
group_by(Experiment, `Pair Type`, Condition, statistic) %>%
dplyr::summarize(mean = mean(value, na.rm=1),
se = sd(value, na.rm=1)/sqrt(n()),
text = sprintf("%.2f \u00b1 %.2f",mean, se)) %>%
select(-c(mean, se)) %>%
spread(statistic, text) %>%
spread(`Pair Type`, `p(select S+)`) %>%
rename(`S+ Selection (Chosen pairs)` = Chosen, `S+ Selection (Unchosen pairs)` = Unchosen) %>%
subset(select = c("Experiment", "Condition", "S+ Selection (Chosen pairs)", "S+ Selection (Unchosen pairs)",
"Pairs Memory", "Choice Memory"))
} else {
table <- source_table %>%
gather(key="coef", value="value", -group_vars) %>%
group_by_at(vars(c(group_vars, "coef"))) %>%
subset(!is.na(value)) %>%
dplyr::summarize(median = median(value, na.rm=1),
high95 = posterior_interval(as.matrix(value), na.rm=1, prob=0.95)[2],
low95 = posterior_interval(as.matrix(value), na.rm=1, prob=0.95)[1]) %>%
mutate(sig = ifelse((low95>0 & high95>0) | (low95<0 & high95<0),"*",""),
text = sprintf("%.2f [%.2f %.2f]%s",median, low95, high95, sig)) %>%
select(-c(median, high95, low95, sig)) %>%
spread(coef, text) %>%
subset(select = colnames(source_table))
}
return(table)
}
supp_table1 <- create_table(source_data$table1, 0, 0)
supp_table2 <- create_table(source_data$table2, 1, 0)
supp_table3 <- create_table(source_data$table3, 1, 1)
supp_table4 <- create_table(source_data$table4, 1, 0)
supp_table5 <- create_table(source_data$table5, 1, 0)
supp_table6 <- create_table(source_data$table6, 1, 0)
supp_table1
supp_table2
supp_table3
supp_table4
supp_table5
supp_table6
