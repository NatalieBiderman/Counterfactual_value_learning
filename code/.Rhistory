mutate(inverse_bias = Chosen_bias - Unchosen_bias)
bias <- clean_data_Exp1$final_decisions %>%
subset(!is.nan(left_chosen)) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen_bias", "Unchosen_bias")) %>%
group_by(PID, choice) %>%
dplyr::summarise(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
spread(choice, p_gain) %>%
mutate(inverse_bias = Chosen_bias - Unchosen_bias)
bias
choice_acc <- clean_data_Exp1$memory %>%
# add a choice measure for hits (old trials + old response)
mutate(choice_acc_hits = ifelse(old_response==1 & old_pair==1,
ifelse(chosen_object==chosen_object_response,1,0), NA)) %>%
group_by(PID) %>%
dplyr::summarise(pair_acc = mean(pair_acc, na.rm=1),
choice_acc = mean(choice_acc, na.rm=1),
choice_acc_hits = mean(choice_acc_hits, na.rm=1),
n_hits = sum(old_response==1 & old_pair==1),
n_old_response = sum(old_response))
choice_acc %>% gather(key="type", value="acc", -PID) %>%
group_by(type) %>%
dplyr::summarise(mean = mean(acc, na.rm=1),
se = sd(acc, na.rm=1)/sqrt(n),
text = sprintf("%.2f \u00b1 %.2f",mean, se))
choice_acc %>% gather(key="type", value="acc", -PID) %>%
group_by(type) %>%
dplyr::summarise(mean = mean(acc, na.rm=1),
se = sd(acc, na.rm=1)/sqrt(n),
text = sprintf("%.2f \u00b1 %.2f",mean, se)) %>%
select(type, text)
choice_acc_bias <- choice_acc %>%
merge(bias, by="PID")
ggplot(choice_acc_bias, aes(x = choice_acc, y = pair_acc)) +
geom_point(shape=21) +
theme +
point_plot_theme +
geom_smooth(method="lm")
# run Bayseian model for overall choice acc
M_overall_choice_acc <- stan_glm(data = choice_acc_bias,
"inverse_bias ~ choice_acc",
family = gaussian(),
adapt_delta = params$adapt_delta,
iter = params$iterations,
chains = params$chains,
warmup = params$warmup)
as.data.frame(M_overall_choice_acc) %>%
gather(coef,value) %>%
group_by(coef) %>%
dplyr::summarise(HDI95_low = posterior_interval(as.matrix(value), prob=0.95)[1],
HDI95_high = posterior_interval(as.matrix(value), prob=0.95)[2],
median = median(value)) %>%
mutate(value = sprintf("%.2f [%.2f, %.2f]",median, HDI95_low, HDI95_high))
# run Bayseian model for hits choice acc
M_hits_choice_acc <- stan_glm(data = choice_acc_bias,
"inverse_bias ~ choice_acc_hits",
family = gaussian(),
adapt_delta = params$adapt_delta,
iter = params$iterations,
chains = params$chains,
warmup = params$warmup)
as.data.frame(M_hits_choice_acc) %>%
gather(coef,value) %>%
group_by(coef) %>%
dplyr::summarise(HDI95_low = posterior_interval(as.matrix(value), prob=0.95)[1],
HDI95_high = posterior_interval(as.matrix(value), prob=0.95)[2],
median = median(value)) %>%
mutate(value = sprintf("%.2f [%.2f, %.2f]",median, HDI95_low, HDI95_high))
rt_fd <- clean_data_Exp1$final_decisions %>%
group_by(PID,chosen_trial) %>%
mutate(zscored_rt = (rt - mean(rt, na.rm=1))/sd(rt, na.rm=1)) %>%
dplyr::summarize(rt = mean(rt, na.rm=1),
normalized_rt = mean(zscored_rt, na.rm=1),
bias = mean(higher_outcome_chosen, na.rm=1))
ggplot(rt_fd, aes(x=factor(chosen_trial),y=rt)) +
stat_summary_bin(fun.y="mean", geom="bar", binwidth=0.2) +
geom_point(position=position_jitter(width=0.1), shape=21) +
stat_summary(fun.data=mean_se, fun.args = list(mult=2), geom="errorbar", width=0.1, size=0.9,
position=position_nudge(0.2)) +
#scale_y_continuous(expand=c(0,0), breaks=c(0,0.5,1), limits=c(0,1.02)) +
theme +
labs(y="zscored RT", title="Final Decisions Choices")
ggplot(rt_fd, aes(y = bias, x = rt, color=factor(chosen_trial))) +
geom_point(shape=21) +
theme +
point_plot_theme +
geom_smooth(method="lm")
rt_fd_est <- subset(final_decisions, !is.na(left_chosen))  %>%
group_by(PID) %>%
mutate(zscored_rt = (rt - mean(rt, na.rm=1))/sd(rt, na.rm=1)) %>%
group_by(PID, chosen_trial, pair_type) %>%
dplyr::summarize(rt = mean(rt, na.rm=1),
normalized_rt = mean(zscored_rt, na.rm=1),
bias = mean(higher_outcome_chosen, na.rm=1))
rt_fd_choice <- subset(final_decisions, !is.na(left_chosen)) %>%
group_by(PID) %>%
mutate(zscored_rt = (rt - mean(rt, na.rm=1))/sd(rt, na.rm=1),
choice_pair = ifelse(chosen_trial==1, "Chosen pairs", "Unchosen pairs"),
choice_type = ifelse(higher_outcome_chosen==1, "Gain chosen", "No Gain chosen")) %>%
group_by(PID, choice_pair, choice_type) %>%
dplyr::summarize(rt = mean(rt, na.rm=1),
normalized_rt = mean(zscored_rt, na.rm=1))
subs <- unique(clean_data_Exp1$final_decisions$PID)
final_decisions <- c();
for (s in subs){
curr_outcome_eval <- subset(clean_data_Exp1$outcome_evaluation, PID==s)
curr_final_decisions <- subset(clean_data_Exp1$final_decisions, PID==s)
# insert outcome evaluation to the final decisions matrix
for (t in 1:nrow(curr_final_decisions)){
curr_final_decisions$est_outcome_left[t] <-
curr_outcome_eval$outcome_eval_gain[curr_outcome_eval$stimulus_id==curr_final_decisions$stimulus_left[t]]
curr_final_decisions$est_outcome_right[t] <-
curr_outcome_eval$outcome_eval_gain[curr_outcome_eval$stimulus_id==curr_final_decisions$stimulus_right[t]]
}
final_decisions <- bind_rows(final_decisions, curr_final_decisions)
}
final_decisions <- mutate(subset(final_decisions, !is.nan(left_chosen)),
pair_type = ifelse(est_outcome_left==est_outcome_right, "same_estimation",
ifelse((left_chosen==1 & est_outcome_left==1) |
(left_chosen==0 & est_outcome_right==1),
"higher_est_chosen", "lower_est_chosen")))
rt_fd_est <- subset(final_decisions, !is.na(left_chosen))  %>%
group_by(PID) %>%
mutate(zscored_rt = (rt - mean(rt, na.rm=1))/sd(rt, na.rm=1)) %>%
group_by(PID, chosen_trial, pair_type) %>%
dplyr::summarize(rt = mean(rt, na.rm=1),
normalized_rt = mean(zscored_rt, na.rm=1),
bias = mean(higher_outcome_chosen, na.rm=1))
ggplot(rt_fd_est, aes(x=pair_type,y=normalized_rt)) +
stat_summary_bin(fun.y="mean", geom="bar", binwidth=0.2) +
#geom_point(position=position_jitter(width=0.1), shape=21) +
stat_summary(fun.data=mean_se, fun.args = list(mult=2), geom="errorbar", width=0.1, size=0.9,
position=position_nudge(0.2)) +
theme +
labs(y="zscored RT", title="Choices by estimation outcomes") +
facet_wrap(.~chosen_trial)
rt_by_choice_exp1 <- subset(clean_data_Exp1$final_decisions, !is.na(left_chosen)) %>%
group_by(PID) %>%
mutate(zscored_rt = zscore(rt, na.rm=1),
pair_type = ifelse(chosen_trial==1, "Chosen", "Unchosen"),
choice_type = ifelse(higher_outcome_chosen==1, "Gain chosen", "No Gain chosen")) %>%
group_by(PID, pair_type, choice_type) %>%
dplyr::summarise(n = n(),
rt = mean(rt, na.rm=1),
zscored_rt = mean(zscored_rt, na.rm=1))
too_few_trials_subs <- unique(rt_by_choice_exp1$PID[rt_by_choice_exp1$n<4])
rt_by_choice_exp1 <- rt_by_choice_exp1 %>%
subset(!(PID %in% too_few_trials_subs))
rt_by_choice_exp1 %>%
group_by(pair_type, choice_type) %>%
dplyr::summarize(mean = mean(zscored_rt, na.rm=1),
se = sd(zscored_rt, na.rm=1)/sqrt(n())) %>%
mutate(`Normalized RT` = sprintf("%.2f \u00b1 %.2f", mean, se)) %>%
rename(`Pair type` = pair_type, `Choice type` = choice_type) %>%
dplyr::select(`Pair type`, `Choice type`, `Normalized RT`) %>%
kbl() %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
bias <- clean_data_Exp1$final_decisions %>%
mutate(pair_type = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, pair_type) %>%
dplyr::summarise(p_gain = mean(higher_outcome_chosen, na.rm=1))
bias
rt_effect_by_choice_exp1 <- rt_by_choice_exp1 %>%
dplyr::select(-rt) %>%
spread(choice_type, zscored_rt) %>%
mutate(rt_effect = `Gain chosen` - `No Gain chosen`) %>%
merge(bias, by=c("PID", "pair_type"))
ggplot(rt_effect_by_choice_exp1, aes(y = p_gain, x = rt_effect, color=pair_type)) +
geom_point(shape=21) +
theme +
point_plot_theme +
geom_smooth(method="lm")
rt_effect_by_choice_exp1
bias
rt_by_choice_exp1
rt_by_choice_exp1 %>%
dplyr::select(-rt) %>%
spread(choice_type, zscored_rt)
rt_by_choice_exp1 %>%
dplyr::select(-c(rt,n))
rt_effect_by_choice_exp1 <- rt_by_choice_exp1 %>%
dplyr::select(-c(rt,n)) %>%
spread(choice_type, zscored_rt) %>%
mutate(rt_effect = `Gain chosen` - `No Gain chosen`) %>%
merge(bias, by=c("PID", "pair_type"))
ggplot(rt_effect_by_choice_exp1, aes(y = p_gain, x = rt_effect, color=pair_type)) +
geom_point(shape=21) +
theme +
point_plot_theme +
geom_smooth(method="lm")
clean_data_Exp1$final_decisions <- clean_data_Exp1$final_decisions %>%
group_by(PID) %>%
mutate(zscored_rt = zscore(rt, na.rm=1))
bias <- subset(clean_data_Exp1$final_decisions, !is.na(left_chosen)) %>%
mutate(pair_type = ifelse(chosen_trial==1, "Chosen_pgain", "Unchosen_pgain")) %>%
group_by(PID, pair_type) %>%
dplyr::summarise(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
spread(pair_type, p_gain) %>%
mutate(bias_effect = Chosen_pgain-Unchosen_pgain)
rt_bias_exp1 <- subset(clean_data_Exp1$final_decisions, !is.na(left_chosen)) %>%
group_by(PID) %>%
mutate(zscored_rt = zscore(rt, na.rm=1),
pair_type = ifelse(chosen_trial==1, "Chosen_rt", "Unchosen_rt")) %>%
group_by(PID, pair_type) %>%
dplyr::summarise(zscored_rt = mean(rt, na.rm=1)) %>%
spread(pair_type, zscored_rt) %>%
mutate(rt_effect = Chosen_rt-Unchosen_rt) %>%
gather(key="condition", value="zscored_rt", -PID) %>%
merge(bias, by="PID")
rt_bias_exp1
ggplot(rt_bias_exp1, aes(y = bias_effect, x = zscored_rt, color=condition)) +
geom_point(shape=21) +
theme +
point_plot_theme +
geom_smooth(method="lm")
rt_bias_exp1 <- subset(clean_data_Exp1$final_decisions, !is.na(left_chosen)) %>%
group_by(PID) %>%
mutate(zscored_rt = zscore(rt, na.rm=1),
pair_type = ifelse(chosen_trial==1, "Chosen_rt", "Unchosen_rt")) %>%
group_by(PID, pair_type) %>%
dplyr::summarise(zscored_rt = mean(zscored_rt, na.rm=1)) %>%
spread(pair_type, zscored_rt) %>%
mutate(rt_effect = Chosen_rt-Unchosen_rt) %>%
gather(key="condition", value="zscored_rt", -PID) %>%
merge(bias, by="PID")
ggplot(rt_bias_exp1, aes(y = bias_effect, x = zscored_rt, color=condition)) +
geom_point(shape=21) +
theme +
point_plot_theme +
geom_smooth(method="lm")
subs <- unique(clean_data_Exp1$final_decisions$PID)
fd <- c()
for (s in subs){
fd_sub <- subset(clean_data_Exp1$final_decisions, PID==s)
mean_rt <- mean(fd_sub$rt, na.rm=1)
sd_rt <- sd(fd_sub$rt, na.rm=1)
fd_sub <- fd_sub %>%
mutate(zscore_rt2 = (rt - mean_rt)/sd_rt)
fd <- bind_rows(df, fd_sub)
}
fd <- c()
subs <- unique(clean_data_Exp1$final_decisions$PID)
s = subs[1]
fd_sub <- subset(clean_data_Exp1$final_decisions, PID==s)
mean_rt <- mean(fd_sub$rt, na.rm=1)
sd_rt <- sd(fd_sub$rt, na.rm=1)
fd_sub <- fd_sub %>%
mutate(zscore_rt2 = (rt - mean_rt)/sd_rt)
subs <- unique(clean_data_Exp1$final_decisions$PID)
fd <- c()
for (s in subs){
fd_sub <- subset(clean_data_Exp1$final_decisions, PID==s)
mean_rt <- mean(fd_sub$rt, na.rm=1)
sd_rt <- sd(fd_sub$rt, na.rm=1)
fd_sub <- fd_sub %>%
mutate(zscore_rt2 = (rt - mean_rt)/sd_rt)
fd <- bind_rows(fd, fd_sub)
}
rt_bias_exp1 <- fd %>% #subset(clean_data_Exp1$final_decisions, !is.na(left_chosen)) %>%
group_by(PID) %>%
mutate(zscored_rt = zscore(rt, na.rm=1),
pair_type = ifelse(chosen_trial==1, "Chosen_rt", "Unchosen_rt")) %>%
group_by(PID, pair_type) %>%
dplyr::summarise(zscored_rt = mean(zscored_rt, na.rm=1),
zscored_rt2 = mean(zscored_rt2, na.rm=1))
rt_bias_exp1 <- fd %>% #subset(clean_data_Exp1$final_decisions, !is.na(left_chosen)) %>%
group_by(PID) %>%
mutate(zscored_rt = zscore(rt, na.rm=1),
pair_type = ifelse(chosen_trial==1, "Chosen_rt", "Unchosen_rt")) %>%
group_by(PID, pair_type) %>%
dplyr::summarise(zscored_rt = mean(zscored_rt, na.rm=1),
zscored_rt2 = mean(zscore_rt2, na.rm=1))
View(rt_bias_exp1)
rt_bias_exp1 <- fd %>% #subset(clean_data_Exp1$final_decisions, !is.na(left_chosen)) %>%
group_by(PID) %>%
mutate(zscored_rt = zscore(rt, na.rm=1),
pair_type = ifelse(chosen_trial==1, "Chosen_rt", "Unchosen_rt")) %>%
group_by(PID, pair_type) %>%
dplyr::summarise(zscored_rt = mean(rt, na.rm=1),
zscored_rt2 = mean(zscore_rt2, na.rm=1)) %>%
spread(pair_type, zscored_rt) %>%
mutate(rt_effect = Chosen_rt-Unchosen_rt) %>%
gather(key="condition", value="zscored_rt", -PID) %>%
merge(bias, by="PID")
ggplot(rt_bias_exp1, aes(y = bias_effect, x = zscored_rt, color=condition)) +
geom_point(shape=21) +
theme +
point_plot_theme +
geom_smooth(method="lm")
rt_bias_exp1 <- fd %>% #subset(clean_data_Exp1$final_decisions, !is.na(left_chosen)) %>%
group_by(PID) %>%
mutate(zscored_rt = zscore(rt, na.rm=1),
pair_type = ifelse(chosen_trial==1, "Chosen_rt", "Unchosen_rt")) %>%
group_by(PID, pair_type) %>%
dplyr::summarise(zscored_rt = mean(rt, na.rm=1)) %>%
spread(pair_type, zscored_rt) %>%
mutate(rt_effect = Chosen_rt-Unchosen_rt) %>%
gather(key="condition", value="zscored_rt", -PID) %>%
merge(bias, by="PID")
ggplot(rt_bias_exp1, aes(y = bias_effect, x = zscored_rt, color=condition)) +
geom_point(shape=21) +
theme +
point_plot_theme +
geom_smooth(method="lm")
ggplot(subset(rt_bias_exp1, condition=="rt_effect"), aes(y = bias_effect, x = zscored_rt, color=condition)) +
geom_point(shape=21) +
theme +
point_plot_theme +
geom_smooth(method="lm")
M <- glm(data=subset(clean_data_Exp1$final_decisions, !is.na(left_chosen)),
higher_outcome_chosen ~ chosen_trial_centered*zscored_rt,
family = binomial(link="logit"))
M
M <- stan_glm(data=subset(clean_data_Exp1$final_decisions, !is.na(left_chosen)),
higher_outcome_chosen ~ chosen_trial_centered*zscored_rt,
family = binomial(link="logit"),
adapt_delta = params$adapt_delta,
iter = params$iterations,
chains = params$chains,
warmup = params$warmup))
M <- stan_glm(data=subset(clean_data_Exp1$final_decisions, !is.na(left_chosen)),
higher_outcome_chosen ~ chosen_trial_centered*zscored_rt,
family = binomial(link="logit"),
adapt_delta = params$adapt_delta,
iter = params$iterations,
chains = params$chains,
warmup = params$warmup)
as.data.frame(M)[,1:4] %>%
gather(coef,value) %>%
group_by(coef) %>%
dplyr::summarize(HDI95_low = posterior_interval(as.matrix(value), prob=0.95)[1],
HDI95_high = posterior_interval(as.matrix(value), prob=0.95)[2],
median = median(value)) %>%
mutate(sig = ifelse((median>0 & HDI95_low>0 & HDI95_high>0) |
(median<0 & HDI95_low<0 & HDI95_high<0),"*",""),
value = sprintf("%.2f [%.2f, %.2f]%s",median, HDI95_low, HDI95_high, sig)) %>%
dplyr::select(coef, value)
M_bias_rt_group <- M_bias_rt[,!str_detect(colnames(M_bias_rt),"PID")] %>%
mutate(intercept_chosen = `(Intercept)` + chosen_trial_centered,
slope_chosen = zscored_rt + `chosen_trial_centered:zscored_rt`,
intercept_unchosen = `(Intercept)` - chosen_trial_centered,
slope_unchosen = zscored_rt - `chosen_trial_centered:zscored_rt`) %>%
gather(coef,value) %>%
group_by(coef) %>%
dplyr::summarize(HDI95_low = posterior_interval(as.matrix(value), prob=0.95)[1],
HDI95_high = posterior_interval(as.matrix(value), prob=0.95)[2],
median = median(value)) %>%
mutate(sig = ifelse((median>0 & HDI95_low>0 & HDI95_high>0) |
(median<0 & HDI95_low<0 & HDI95_high<0),"*",""),
value = sprintf("%.2f [%.2f, %.2f]%s",median, HDI95_low, HDI95_high, sig)) %>%
dplyr::select(coef, value)
M_bias_rt <- as.data.frame(M)
M_bias_rt_group <- M_bias_rt[,!str_detect(colnames(M_bias_rt),"PID")] %>%
mutate(intercept_chosen = `(Intercept)` + chosen_trial_centered,
slope_chosen = zscored_rt + `chosen_trial_centered:zscored_rt`,
intercept_unchosen = `(Intercept)` - chosen_trial_centered,
slope_unchosen = zscored_rt - `chosen_trial_centered:zscored_rt`) %>%
gather(coef,value) %>%
group_by(coef) %>%
dplyr::summarize(HDI95_low = posterior_interval(as.matrix(value), prob=0.95)[1],
HDI95_high = posterior_interval(as.matrix(value), prob=0.95)[2],
median = median(value)) %>%
mutate(sig = ifelse((median>0 & HDI95_low>0 & HDI95_high>0) |
(median<0 & HDI95_low<0 & HDI95_high<0),"*",""),
value = sprintf("%.2f [%.2f, %.2f]%s",median, HDI95_low, HDI95_high, sig)) %>%
dplyr::select(coef, value)
M_bias_rt_group
ggplot(data=clean_data_Exp1$final_decisions, aes(y=higher_outcome_chosen,x=zscored_rt,color=chosen_trial)) +
#geom_point(position=position_jitter(height=0.04)) +
stat_smooth(method="glm", method.args=list(family="binomial"),
na.rm=TRUE, se=FALSE, alpha=0.3, size=0.5) +
stat_smooth(method="glm",method.args=list(family="binomial"), na.rm=TRUE, size=1.5) +
theme(legend.position="top") +
labs(title="Choosing gain item as a function of RT",
x="zscored RT",
y="p(choose gain)") +
geom_hline(yintercept=0.5, linetype="dashed", size=0.5) +
geom_vline(xintercept=0, linetype="dashed", size=0.5)
ggplot(data=clean_data_Exp1$final_decisions, aes(y=higher_outcome_chosen,x=zscored_rt)) +
#geom_point(position=position_jitter(height=0.04)) +
stat_smooth(aes(color=PID),method="glm", method.args=list(family="binomial"),
na.rm=TRUE, se=FALSE, alpha=0.3, size=0.5) +
#stat_smooth(method="glm",method.args=list(family="binomial"), na.rm=TRUE, size=1.5) +
theme(legend.position="none") +
labs(title="Choosing gain item as a function of RT",
x="zscored RT",
y="p(choose gain)") +
geom_hline(yintercept=0.5, linetype="dashed", size=0.5) +
geom_vline(xintercept=0, linetype="dashed", size=0.5) +
facet_wrap(.~chosen_trial)
ggplot(data=clean_data_Exp1$final_decisions, aes(y=higher_outcome_chosen,x=zscored_rt)) +
#geom_point(position=position_jitter(height=0.04)) +
# stat_smooth(aes(color=PID),method="glm", method.args=list(family="binomial"),
#             na.rm=TRUE, se=FALSE, alpha=0.3, size=0.5) +
stat_smooth(method="glm",method.args=list(family="binomial"), na.rm=TRUE, size=1.5) +
theme(legend.position="none") +
labs(title="Choosing gain item as a function of RT",
x="zscored RT",
y="p(choose gain)") +
geom_hline(yintercept=0.5, linetype="dashed", size=0.5) +
geom_vline(xintercept=0, linetype="dashed", size=0.5) +
facet_wrap(.~chosen_trial)
M2 <- stan_glm(data=subset(clean_data_Exp1$final_decisions, !is.na(left_chosen)),
higher_outcome_chosen ~ chosen_trial_centered*rt,
family = binomial(link="logit"),
adapt_delta = params$adapt_delta,
iter = params$iterations,
chains = params$chains,
warmup = params$warmup)
M_bias_rt <- as.data.frame(M2)
M_bias_rt_group <- M_bias_rt[,!str_detect(colnames(M_bias_rt),"PID")] %>%
mutate(intercept_chosen = `(Intercept)` + chosen_trial_centered,
slope_chosen = rt + `chosen_trial_centered:rt`,
intercept_unchosen = `(Intercept)` - chosen_trial_centered,
slope_unchosen = rt - `chosen_trial_centered:rt`) %>%
gather(coef,value) %>%
group_by(coef) %>%
dplyr::summarize(HDI95_low = posterior_interval(as.matrix(value), prob=0.95)[1],
HDI95_high = posterior_interval(as.matrix(value), prob=0.95)[2],
median = median(value)) %>%
mutate(sig = ifelse((median>0 & HDI95_low>0 & HDI95_high>0) |
(median<0 & HDI95_low<0 & HDI95_high<0),"*",""),
value = sprintf("%.2f [%.2f, %.2f]%s",median, HDI95_low, HDI95_high, sig)) %>%
dplyr::select(coef, value)
ggplot(data=clean_data_Exp1$final_decisions, aes(y=higher_outcome_chosen,x=rt)) +
#geom_point(position=position_jitter(height=0.04)) +
# stat_smooth(aes(color=PID),method="glm", method.args=list(family="binomial"),
#             na.rm=TRUE, se=FALSE, alpha=0.3, size=0.5) +
stat_smooth(method="glm",method.args=list(family="binomial"), na.rm=TRUE, size=1.5) +
theme(legend.position="none") +
labs(title="Choosing gain item as a function of RT",
x="zscored RT",
y="p(choose gain)") +
geom_hline(yintercept=0.5, linetype="dashed", size=0.5) +
geom_vline(xintercept=0, linetype="dashed", size=0.5) +
facet_wrap(.~chosen_trial)
M_bias_rt_group
M_bias_rt_group
M_bias_rt[,!str_detect(colnames(M_bias_rt),"PID")] %>%
mutate(intercept_chosen = `(Intercept)` + chosen_trial_centered,
slope_chosen = zscored_rt + `chosen_trial_centered:zscored_rt`,
intercept_unchosen = `(Intercept)` - chosen_trial_centered,
slope_unchosen = zscored_rt - `chosen_trial_centered:zscored_rt`) %>%
gather(coef,value) %>%
group_by(coef) %>%
dplyr::summarize(HDI95_low = posterior_interval(as.matrix(value), prob=0.95)[1],
HDI95_high = posterior_interval(as.matrix(value), prob=0.95)[2],
median = median(value)) %>%
mutate(sig = ifelse((median>0 & HDI95_low>0 & HDI95_high>0) |
(median<0 & HDI95_low<0 & HDI95_high<0),"*",""),
value = sprintf("%.2f [%.2f, %.2f]%s",median, HDI95_low, HDI95_high, sig)) %>%
dplyr::select(coef, value)
M_bias_rt <- as.data.frame(M)
M_bias_rt[,!str_detect(colnames(M_bias_rt),"PID")] %>%
mutate(intercept_chosen = `(Intercept)` + chosen_trial_centered,
slope_chosen = zscored_rt + `chosen_trial_centered:zscored_rt`,
intercept_unchosen = `(Intercept)` - chosen_trial_centered,
slope_unchosen = zscored_rt - `chosen_trial_centered:zscored_rt`) %>%
gather(coef,value) %>%
group_by(coef) %>%
dplyr::summarize(HDI95_low = posterior_interval(as.matrix(value), prob=0.95)[1],
HDI95_high = posterior_interval(as.matrix(value), prob=0.95)[2],
median = median(value)) %>%
mutate(sig = ifelse((median>0 & HDI95_low>0 & HDI95_high>0) |
(median<0 & HDI95_low<0 & HDI95_high<0),"*",""),
value = sprintf("%.2f [%.2f, %.2f]%s",median, HDI95_low, HDI95_high, sig)) %>%
dplyr::select(coef, value)
M <- stan_glm(data=subset(clean_data_Exp1$final_decisions, !is.na(left_chosen)),
higher_outcome_chosen ~ chosen_trial_centered*zscored_rt + (chosen_trial_centered*zscored_rt | PID),
family = binomial(link="logit"),
adapt_delta = params$adapt_delta,
iter = params$iterations,
chains = params$chains,
warmup = params$warmup)
M <- stan_glmer(data=subset(clean_data_Exp1$final_decisions, !is.na(left_chosen)),
higher_outcome_chosen ~ chosen_trial_centered*zscored_rt + (chosen_trial_centered*zscored_rt | PID),
family = binomial(link="logit"),
adapt_delta = params$adapt_delta,
iter = params$iterations,
chains = params$chains,
warmup = params$warmup)
M2 <- stan_glmer(data=subset(clean_data_Exp1$final_decisions, !is.na(left_chosen)),
higher_outcome_chosen ~ chosen_trial_centered*rt + (chosen_trial_centered*rt | PID),
family = binomial(link="logit"),
adapt_delta = params$adapt_delta,
iter = params$iterations,
chains = params$chains,
warmup = params$warmup)
M_bias_rt <- as.data.frame(M)
M_bias_rt_group <- M_bias_rt[,!str_detect(colnames(M_bias_rt),"PID")] %>%
mutate(intercept_chosen = `(Intercept)` + chosen_trial_centered,
slope_chosen = zscored_rt + `chosen_trial_centered:zscored_rt`,
intercept_unchosen = `(Intercept)` - chosen_trial_centered,
slope_unchosen = zscored_rt - `chosen_trial_centered:zscored_rt`) %>%
gather(coef,value) %>%
group_by(coef) %>%
dplyr::summarize(HDI95_low = posterior_interval(as.matrix(value), prob=0.95)[1],
HDI95_high = posterior_interval(as.matrix(value), prob=0.95)[2],
median = median(value)) %>%
mutate(sig = ifelse((median>0 & HDI95_low>0 & HDI95_high>0) |
(median<0 & HDI95_low<0 & HDI95_high<0),"*",""),
value = sprintf("%.2f [%.2f, %.2f]%s",median, HDI95_low, HDI95_high, sig)) %>%
dplyr::select(coef, value)
M_bias_rt_group
View(M)
M_zscored_RT_FD <- M
save(list = M_zscored_RT_FD,
file = "../data/Models/RT_final_decisions/M_zscored_RT_FD.RData")
save(list = M_zscored_RT_FD,file = "../data/Models/RT_final_decisions/M_zscored_RT_FD.RData")
save(M_zscored_RT_FD,file = "../data/Models/RT_final_decisions/M_zscored_RT_FD.RData")
test <- summary(M_zscored_RT_FD)
test <- as.data.frame(test)
View(test)
