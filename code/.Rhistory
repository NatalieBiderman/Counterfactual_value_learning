percent = round(sum(gain_eval<0.5)/n()*100,1)) %>%
mutate(`p(estimate as rewarded)` = sprintf("%.2f \u00b1 %.2f",mean, se),
n_effect = ifelse((reward=="Rewarded" & choice=="Chosen") | (reward=="Unrewarded" & choice=="Unchosen"),
n-n_effect, n_effect),
`n effect` = sprintf("%d/%d", n_effect, n),
`% effect` = sprintf("%.f",n_effect/n*100)) %>%
dplyr::select(choice,reward,`p(estimate as rewarded)`,`n effect`,`% effect`) %>%
kbl() %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
model_posterior <- as.data.frame(M_outcome_estimation_no_strategy)
model_posterior[,!str_detect(colnames(model_posterior),"PID")] %>%
mutate(gain_chosen = `(Intercept)` + chosen_obj_centered + reward_type + `chosen_obj_centered:reward_type`,
no_gain_chosen = `(Intercept)` + chosen_obj_centered - reward_type - `chosen_obj_centered:reward_type`,
gain_unchosen = `(Intercept)` - chosen_obj_centered + reward_type - `chosen_obj_centered:reward_type`,
no_gain_unchosen = `(Intercept)` - chosen_obj_centered - reward_type + `chosen_obj_centered:reward_type`) %>%
gather(coef,value) %>%
group_by(coef) %>%
dplyr::summarize(HDI95_low = posterior_interval(as.matrix(value), prob=0.95)[1],
HDI95_high = posterior_interval(as.matrix(value), prob=0.95)[2],
median = median(value)) %>%
mutate(value = sprintf("%.2f [%.2f, %.2f]",median, HDI95_low, HDI95_high)) %>%
dplyr::select(coef, value) %>%
kbl() %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
inverse_decision_estimation_no_strategy <- subset(outcome_estimation,inverse_strategy==0) %>%
select(-c(eval_acc, eval_rt)) %>%
spread(reward, gain_eval) %>%
mutate(reward_diff = Rewarded-Unrewarded) %>%
merge(p_gain, by=c("PID","choice")) %>%
mutate(choice_centered = ifelse(choice=="Chosen", 1, -1),
p_gain_centered = p_gain - 0.5)
ggplot(inverse_decision_estimation_no_strategy, aes(y=p_gain, x=reward_diff)) +
geom_point() +
stat_smooth(method=lm) +
facet_wrap(.~choice) +
theme + point_plot_theme +
geom_hline(yintercept=0, size=1, linetype="dashed") +
geom_vline(xintercept=0, size=1, linetype="dashed")
load("../data/Models/Strategy_analysis/M_inverse_decision_estimation_no_strategy.RData")
Exp1_FD_no_strategy
load("../data/Models/Strategy_analysis/M_Exp1_no_strategy_memory_bias.RData")
load("../data/Models/Strategy_analysis/coefs_pair_acc_bias_Exp1_no_strategy.RData")
as.data.frame(M_Exp1_no_strategy_memory_bias) %>%
gather(coef, value, `(Intercept)`:sigma) %>%
group_by(coef) %>%
dplyr::summarize(HDI95_low = posterior_interval(as.matrix(value), prob=0.95)[1],
HDI95_high = posterior_interval(as.matrix(value), prob=0.95)[2],
median = median(value)) %>%
mutate(value = sprintf("%.2f [%.2f, %.2f]",median, HDI95_low, HDI95_high)) %>%
dplyr::select(coef, value) %>%
kbl() %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
memory_per_deliberation_subs_no_strategy
memory_per_deliberation_subs_no_strategy <- memory_per_deliberation_subs %>%
mutate(inverse_strategy = ifelse(PID %in% inverse_strategy,1,0))
memory_per_deliberation_subs_no_strategy %>%
group_by(pair_type_cond) %>%
dplyr::summarize(mean = mean(pair_acc),
se = sd(pair_acc)/sqrt(n())) %>%
mutate(`pair memory accuracy` = sprintf("%.2f \u00b1 %.2f",mean, se)) %>%
dplyr::rename(`condition type` = pair_type_cond) %>%
dplyr::select(`condition type`, `pair memory accuracy`) %>%
kbl() %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
memory_per_deliberation_subs_no_strategy %>%
group_by(pair_type_cond) %>%
dplyr::summarize(mean = mean(pair_acc),
se = sd(pair_acc)/sqrt(n())) %>%
mutate(`pair memory accuracy` = sprintf("%.2f \u00b1 %.2f",mean, se))
memory_per_deliberation_subs_no_strategy %>%
group_by(inverse_strategy, pair_type_cond) %>%
dplyr::summarize(mean = mean(pair_acc),
se = sd(pair_acc)/sqrt(n())) %>%
mutate(`pair memory accuracy` = sprintf("%.2f \u00b1 %.2f",mean, se))
memory_per_deliberation_subs_no_strategy <- memory_per_deliberation_subs %>%
mutate(inverse_strategy = ifelse(PID %in% inverse_strategy,"Inverse strategy","No inverse startegy"))
memory_per_deliberation_subs_no_strategy %>%
group_by(inverse_strategy, pair_type_cond) %>%
dplyr::summarize(mean = mean(pair_acc),
se = sd(pair_acc)/sqrt(n())) %>%
mutate(`pair memory accuracy` = sprintf("%.2f \u00b1 %.2f",mean, se)) %>%
dplyr::rename(`condition type` = pair_type_cond) %>%
dplyr::select(`condition type`, `pair memory accuracy`) %>%
kbl() %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
memory_per_deliberation_subs_no_strategy %>%
group_by(inverse_strategy, pair_type_cond) %>%
dplyr::summarize(mean = mean(pair_acc),
se = sd(pair_acc)/sqrt(n())) %>%
mutate(`pair memory accuracy` = sprintf("%.2f \u00b1 %.2f",mean, se)) %>%
dplyr::rename(`condition type` = pair_type_cond)
memory_per_deliberation_subs_no_strategy %>%
group_by(inverse_strategy, pair_type_cond) %>%
dplyr::summarize(mean = mean(pair_acc),
se = sd(pair_acc)/sqrt(n())) %>%
mutate(`pair memory accuracy` = sprintf("%.2f \u00b1 %.2f",mean, se)) %>%
dplyr::rename(`condition type` = pair_type_cond,
`reported strategy` = inverse_strategy) %>%
dplyr::select(`reported strategy`, `condition type`, `pair memory accuracy`) %>%
kbl() %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
M_memory_per_deliberation_Exp1_no_strategy
memory_per_deliberation_no_strategy <- memory_per_deliberation %>%
mutate(inverse_strategy = ifelse(PID %in% inverse_strategy,1,0))
M_memory_per_deliberation_Exp1_no_strategy <- stan_glmer(
data = subset(memory_per_deliberation_no_strategy, inverse_strategy==0),
pair_acc ~ pair_type_centered + (pair_type_centered | PID),
family = binomial(link="logit"),
adapt_delta = params$adapt_delta,
iter = params$iterations,
chains = params$chains,
warmup = params$warmup)
save(M_memory_per_deliberation_Exp1_no_strategy,
file = "../data/Models/Strategy_analysis/M_memory_per_deliberation_Exp1_no_strategy.RData")
inverse_decision_estimation_no_strategy <- subset(outcome_estimation,inverse_strategy==0) %>%
select(-c(eval_acc, eval_rt)) %>%
spread(reward, gain_eval) %>%
mutate(reward_diff = Rewarded-Unrewarded) %>%
merge(p_gain, by=c("PID","choice")) %>%
mutate(choice_centered = ifelse(choice=="Chosen", 1, -1),
p_gain_centered = p_gain - 0.5)
as.data.frame(M_memory_per_deliberation_Exp1_no_strategy) %>%
gather(coef, value, `(Intercept)`:pair_type_centered) %>%
group_by(coef) %>%
dplyr::summarize(HDI95_low = posterior_interval(as.matrix(value), prob=0.95)[1],
HDI95_high = posterior_interval(as.matrix(value), prob=0.95)[2],
median = median(value)) %>%
mutate(value = sprintf("%.2f [%.2f, %.2f]",median, HDI95_low, HDI95_high)) %>%
dplyr::select(coef,value) %>%
kbl() %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
inverse_decision_estimation_no_strategy
M_inverse_decision_estimation <- stan_glm(data = inverse_decision_estimation_no_strategy,
p_gain_centered ~ choice_centered * reward_diff,
family = gaussian(),
adapt_delta = params$adapt_delta,
iter = params$iterations,
chains = params$chains,
warmup = params$warmup)
install.packages("dplyr")
install.packages("dplyr")`
inverse_decision_estimation_no_strategy
M_inverse_decision_estimation <- stan_glm(data = inverse_decision_estimation_no_strategy,
p_gain_centered ~ choice_centered * reward_diff,
family = gaussian(),
adapt_delta = params$adapt_delta,
iter = params$iterations,
chains = params$chains,
warmup = params$warmup)
save(M_inverse_decision_estimation_no_strategy, file =
"../data/Models/Strategy_analysis/M_inverse_decision_estimation_no_strategy.RData")
M_inverse_decision_estimation <- stan_glm(data = inverse_decision_estimation_no_strategy,
p_gain_centered ~ choice_centered * reward_diff,
family = gaussian(),
adapt_delta = params$adapt_delta,
iter = params$iterations,
chains = params$chains,
warmup = params$warmup)
list_of_packages <- c("ggplot2", "Rmisc", "cowplot", "reshape2", "gridExtra", "arm", "mosaic", "stringr", "tidyr", "dplyr", "bayesplot", "rstanarm", "latex2exp", "kableExtra")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
lapply(list_of_packages, require, character.only = TRUE)
# Load functions
source("Functions/plotting.R")
source("Functions/modelling.R")
# Figure parameters
fig_size = c(10,10)
fig_type = "png"  # "eps" # or png
Save_plots <- 1
point_size <- 4.5
point_stroke <- 0.6
line_size <- 1
# Bayesian model params
options(mc.cores = parallel::detectCores())
params <- list()
params$iterations <- 4000
params$chains <- 6
params$warmup <- 2000
params$adapt_delta <- 0.99
# Do you want to run the models or load them?
run_models = 0;
M_inverse_decision_estimation <- stan_glm(data = inverse_decision_estimation_no_strategy,
p_gain_centered ~ choice_centered * reward_diff,
family = gaussian(),
adapt_delta = params$adapt_delta,
iter = params$iterations,
chains = params$chains,
warmup = params$warmup)
save(M_inverse_decision_estimation_no_strategy, file = "../data/Models/Strategy_analysis/M_inverse_decision_estimation_no_strategy.RData")
M_inverse_decision_estimation_no_strategy <-
stan_glm(data = inverse_decision_estimation_no_strategy,
p_gain_centered ~ choice_centered * reward_diff,
family = gaussian(),
adapt_delta = params$adapt_delta,
iter = params$iterations,
chains = params$chains,
warmup = params$warmup)
save(M_inverse_decision_estimation_no_strategy, file = "../data/Models/Strategy_analysis/M_inverse_decision_estimation_no_strategy.RData")
as.data.frame(M_inverse_decision_estimation_no_strategy) %>%
mutate(intercept_chosen = `(Intercept)` + choice_centered,
slope_chosen = reward_diff + `choice_centered:reward_diff`,
intercept_unchosen = `(Intercept)` - choice_centered,
slope_unchosen = reward_diff - `choice_centered:reward_diff`) %>%
gather(coef,value) %>%
group_by(coef) %>%
dplyr::summarize(HDI95_low = posterior_interval(as.matrix(value), prob=0.95)[1],
HDI95_high = posterior_interval(as.matrix(value), prob=0.95)[2],
median = median(value)) %>%
mutate(value = sprintf("%.2f [%.2f, %.2f]",median, HDI95_low, HDI95_high)) %>%
dplyr::select(coef, value) %>%
kbl() %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
Exp1_FD_no_strategy %>%
#subset(inverse_strategy==0) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, inverse_strategy, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
group_by(choice) %>%
dplyr::summarize(mean = mean(p_gain, na.rm=1),
se = sd(p_gain, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(p_gain<0.5),
percent = round(sum(p_gain<0.5)/n()*100),2) %>%
mutate(`p(select rewarded)` = sprintf("%.2f \u00b1 %.2f", mean, se),
n_effect = ifelse(choice=="Chosen", n-n_effect, n_effect),
`n effect` = sprintf("%d/%d", n_effect, n),
`% effect` = ifelse(choice=="Chosen", 100-percent, percent)) %>%
rename(`reported strategy` = inverse_strategy)
dplyr::select(`reported strategy`, choice, `p(select rewarded)`, `n effect`, `% effect`) %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
Exp1_FD_no_strategy %>%
#subset(inverse_strategy==0) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, inverse_strategy, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
group_by(choice) %>%
dplyr::summarize(mean = mean(p_gain, na.rm=1),
se = sd(p_gain, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(p_gain<0.5),
percent = round(sum(p_gain<0.5)/n()*100),2) %>%
mutate(`p(select rewarded)` = sprintf("%.2f \u00b1 %.2f", mean, se),
n_effect = ifelse(choice=="Chosen", n-n_effect, n_effect),
`n effect` = sprintf("%d/%d", n_effect, n),
`% effect` = ifelse(choice=="Chosen", 100-percent, percent)) %>%
rename(`reported strategy` = inverse_strategy) %>%
dplyr::select(`reported strategy`, choice, `p(select rewarded)`, `n effect`, `% effect`) %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
Exp1_FD_no_strategy
Exp1_FD_no_strategy %>%
#subset(inverse_strategy==0) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, inverse_strategy, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
group_by(choice) %>%
dplyr::summarize(mean = mean(p_gain, na.rm=1),
se = sd(p_gain, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(p_gain<0.5),
percent = round(sum(p_gain<0.5)/n()*100),2)
Exp1_FD_no_strategy %>%
#subset(inverse_strategy==0) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, inverse_strategy, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
group_by(inverse_strategy, choice) %>%
dplyr::summarize(mean = mean(p_gain, na.rm=1),
se = sd(p_gain, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(p_gain<0.5),
percent = round(sum(p_gain<0.5)/n()*100),2) %>%
mutate(`p(select rewarded)` = sprintf("%.2f \u00b1 %.2f", mean, se),
n_effect = ifelse(choice=="Chosen", n-n_effect, n_effect),
`n effect` = sprintf("%d/%d", n_effect, n),
`% effect` = ifelse(choice=="Chosen", 100-percent, percent)) %>%
rename(`reported strategy` = inverse_strategy) %>%
dplyr::select(`reported strategy`, choice, `p(select rewarded)`, `n effect`, `% effect`) %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
Exp1_FD_no_strategy %>%
#subset(inverse_strategy==0) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, inverse_strategy, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
group_by(inverse_strategy, choice) %>%
dplyr::summarize(mean = mean(p_gain, na.rm=1),
se = sd(p_gain, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(p_gain<0.5),
percent = round(sum(p_gain<0.5)/n()*100),2)
Exp1_FD_no_strategy %>%
#subset(inverse_strategy==0) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, inverse_strategy, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
group_by(inverse_strategy, choice) %>%
dplyr::summarize(mean = mean(p_gain, na.rm=1),
se = sd(p_gain, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(p_gain<0.5),
percent = round(sum(p_gain<0.5)/n()*100,2))
Exp1_FD_no_strategy %>%
#subset(inverse_strategy==0) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, inverse_strategy, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
group_by(inverse_strategy, choice) %>%
dplyr::summarize(mean = mean(p_gain, na.rm=1),
se = sd(p_gain, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(p_gain<0.5),
percent = round(sum(p_gain<0.5)/n()*100,1))
Exp1_FD_no_strategy %>%
#subset(inverse_strategy==0) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, inverse_strategy, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
group_by(inverse_strategy, choice) %>%
dplyr::summarize(mean = mean(p_gain, na.rm=1),
se = sd(p_gain, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(p_gain<0.5),
percent = round(sum(p_gain<0.5)/n()*100))
Exp1_FD_no_strategy %>%
#subset(inverse_strategy==0) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, inverse_strategy, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
group_by(inverse_strategy, choice) %>%
dplyr::summarize(mean = mean(p_gain, na.rm=1),
se = sd(p_gain, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(p_gain<0.5),
percent = round(sum(p_gain<0.5)/n()*100)) %>%
mutate(`p(select rewarded)` = sprintf("%.2f \u00b1 %.2f", mean, se),
n_effect = ifelse(choice=="Chosen", n-n_effect, n_effect),
`n effect` = sprintf("%d/%d", n_effect, n),
`% effect` = ifelse(choice=="Chosen", 100-percent, percent),
`reported strategy` = ifelse(inverse_strategy==1, "Inverse strategy","No inverse strategy"))
Exp1_FD_no_strategy %>%
#subset(inverse_strategy==0) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, inverse_strategy, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
group_by(inverse_strategy, choice) %>%
dplyr::summarize(mean = mean(p_gain, na.rm=1),
se = sd(p_gain, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(p_gain<0.5),
percent = round(sum(p_gain<0.5)/n()*100)) %>%
mutate(`p(select rewarded)` = sprintf("%.2f \u00b1 %.2f", mean, se),
n_effect = ifelse(choice=="Chosen", n-n_effect, n_effect),
`n effect` = sprintf("%d/%d", n_effect, n),
`% effect` = ifelse(choice=="Chosen", 100-percent, percent),
`reported strategy` = ifelse(inverse_strategy==1, "Inverse strategy","No inverse strategy")) %>%
dplyr::select(`reported strategy`, choice, `p(select rewarded)`, `n effect`, `% effect`)
Exp1_FD_no_strategy %>%
#subset(inverse_strategy==0) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, inverse_strategy, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
group_by(inverse_strategy, choice) %>%
dplyr::summarize(mean = mean(p_gain, na.rm=1),
se = sd(p_gain, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(p_gain<0.5),
percent = round(sum(p_gain<0.5)/n()*100)) %>%
mutate(`p(select rewarded)` = sprintf("%.2f \u00b1 %.2f", mean, se),
n_effect = ifelse(choice=="Chosen", n-n_effect, n_effect),
`n effect` = sprintf("%d/%d", n_effect, n),
`% effect` = ifelse(choice=="Chosen", 100-percent, percent),
`reported strategy` = ifelse(inverse_strategy==1, "Inverse strategy","No inverse strategy")) %>%
ungroup_by(inverse_strategy) %>%
dplyr::select(`reported strategy`, choice, `p(select rewarded)`, `n effect`, `% effect`) %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
Exp1_FD_no_strategy %>%
#subset(inverse_strategy==0) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, inverse_strategy, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
group_by(inverse_strategy, choice) %>%
dplyr::summarize(mean = mean(p_gain, na.rm=1),
se = sd(p_gain, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(p_gain<0.5),
percent = round(sum(p_gain<0.5)/n()*100)) %>%
mutate(`p(select rewarded)` = sprintf("%.2f \u00b1 %.2f", mean, se),
n_effect = ifelse(choice=="Chosen", n-n_effect, n_effect),
`n effect` = sprintf("%d/%d", n_effect, n),
`% effect` = ifelse(choice=="Chosen", 100-percent, percent),
`reported strategy` = ifelse(inverse_strategy==1, "Inverse strategy","No inverse strategy")) %>%
dplyr::select(`reported strategy`, choice, `p(select rewarded)`, `n effect`, `% effect`)
Exp1_FD_no_strategy %>%
#subset(inverse_strategy==0) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, inverse_strategy, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
group_by(inverse_strategy, choice) %>%
dplyr::summarize(mean = mean(p_gain, na.rm=1),
se = sd(p_gain, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(p_gain<0.5),
percent = round(sum(p_gain<0.5)/n()*100)) %>%
mutate(`p(select rewarded)` = sprintf("%.2f \u00b1 %.2f", mean, se),
n_effect = ifelse(choice=="Chosen", n-n_effect, n_effect),
`n effect` = sprintf("%d/%d", n_effect, n),
`% effect` = ifelse(choice=="Chosen", 100-percent, percent),
inverse_strategy = ifelse(inverse_strategy==1, "Inverse strategy","No inverse strategy")) %>%
rename(`reported strategy` = inverse_strategy) %>%
dplyr::select(`reported strategy`, choice, `p(select rewarded)`, `n effect`, `% effect`) %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
Exp1_FD_no_strategy %>%
#subset(inverse_strategy==0) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, inverse_strategy, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
group_by(inverse_strategy, choice) %>%
dplyr::summarize(mean = mean(p_gain, na.rm=1),
se = sd(p_gain, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(p_gain<0.5),
percent = round(sum(p_gain<0.5)/n()*100)) %>%
mutate(`p(select rewarded)` = sprintf("%.2f \u00b1 %.2f", mean, se),
n_effect = ifelse(choice=="Chosen", n-n_effect, n_effect),
`n effect` = sprintf("%d/%d", n_effect, n),
`% effect` = ifelse(choice=="Chosen", 100-percent, percent)) %>%,
#inverse_strategy = ifelse(inverse_strategy==1, "Inverse strategy","No inverse strategy")) %>%
rename(`reported strategy` = inverse_strategy) %>%
dplyr::select(`reported strategy`, choice, `p(select rewarded)`, `n effect`, `% effect`)
Exp1_FD_no_strategy %>%
#subset(inverse_strategy==0) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, inverse_strategy, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
group_by(inverse_strategy, choice) %>%
dplyr::summarize(mean = mean(p_gain, na.rm=1),
se = sd(p_gain, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(p_gain<0.5),
percent = round(sum(p_gain<0.5)/n()*100)) %>%
mutate(`p(select rewarded)` = sprintf("%.2f \u00b1 %.2f", mean, se),
n_effect = ifelse(choice=="Chosen", n-n_effect, n_effect),
`n effect` = sprintf("%d/%d", n_effect, n),
`% effect` = ifelse(choice=="Chosen", 100-percent, percent)) %>%
#inverse_strategy = ifelse(inverse_strategy==1, "Inverse strategy","No inverse strategy")) %>%
rename(`reported strategy` = inverse_strategy) %>%
dplyr::select(`reported strategy`, choice, `p(select rewarded)`, `n effect`, `% effect`)
Exp1_FD_no_strategy %>%
#subset(inverse_strategy==0) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, inverse_strategy, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
group_by(inverse_strategy, choice) %>%
dplyr::summarize(mean = mean(p_gain, na.rm=1),
se = sd(p_gain, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(p_gain<0.5),
percent = round(sum(p_gain<0.5)/n()*100)) %>%
mutate(`p(select rewarded)` = sprintf("%.2f \u00b1 %.2f", mean, se),
n_effect = ifelse(choice=="Chosen", n-n_effect, n_effect),
`n effect` = sprintf("%d/%d", n_effect, n),
`% effect` = ifelse(choice=="Chosen", 100-percent, percent),
`reported strategy` = ifelse(inverse_strategy==1, "Inverse strategy","No inverse strategy")) %>%
ungroup(inverse_strategy) %>%
dplyr::select(`reported strategy`, choice, `p(select rewarded)`, `n effect`, `% effect`)
Exp1_FD_no_strategy %>%
#subset(inverse_strategy==0) %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, inverse_strategy, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1)) %>%
group_by(inverse_strategy, choice) %>%
dplyr::summarize(mean = mean(p_gain, na.rm=1),
se = sd(p_gain, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(p_gain<0.5),
percent = round(sum(p_gain<0.5)/n()*100)) %>%
mutate(`p(select rewarded)` = sprintf("%.2f \u00b1 %.2f", mean, se),
n_effect = ifelse(choice=="Chosen", n-n_effect, n_effect),
`n effect` = sprintf("%d/%d", n_effect, n),
`% effect` = ifelse(choice=="Chosen", 100-percent, percent),
`reported strategy` = ifelse(inverse_strategy==1, "Inverse strategy","No inverse strategy")) %>%
ungroup(inverse_strategy) %>%
dplyr::select(`reported strategy`, choice, `p(select rewarded)`, `n effect`, `% effect`) %>%
kbl() %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
outcome_estimation %>%
#subset(inverse_strategy==0) %>%
group_by(inverse_strategy, choice, reward) %>%
dplyr::summarise(mean = mean(gain_eval, na.rm=1),
se = sd(gain_eval, na.rm=1)/sqrt(n()),
n = n(),
n_effect = sum(gain_eval<0.5),
percent = round(sum(gain_eval<0.5)/n()*100,1)) %>%
mutate(`p(estimate as rewarded)` = sprintf("%.2f \u00b1 %.2f",mean, se),
n_effect = ifelse((reward=="Rewarded" & choice=="Chosen") | (reward=="Unrewarded" & choice=="Unchosen"),
n-n_effect, n_effect),
`n effect` = sprintf("%d/%d", n_effect, n),
`% effect` = sprintf("%.f",n_effect/n*100),
`reported strategy` = ifelse(inverse_strategy==1, "Inverse strategy","No inverse strategy")) %>%
ungroup(inverse_strategy) %>%
dplyr::select(`reported strategy`,choice,reward,`p(estimate as rewarded)`,`n effect`,`% effect`) %>%
kbl() %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
memory_per_deliberation_subs_no_strategy %>%
group_by(inverse_strategy, pair_type_cond) %>%
dplyr::summarize(mean = mean(pair_acc),
se = sd(pair_acc)/sqrt(n())) %>%
mutate(`pair memory accuracy` = sprintf("%.2f \u00b1 %.2f",mean, se)) %>%
dplyr::rename(`condition type` = pair_type_cond,
`reported strategy` = inverse_strategy) %>%
dplyr::select(`reported strategy`, `condition type`, `pair memory accuracy`) %>%
kbl() %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
