table3_fits <- function(coef_list, Exp_name){
relevant_cols <- grepl(c("Intercept_"),colnames(coef_list$posterior_group_coefs)) |
grepl(c("Slope_"),colnames(coef_list$posterior_group_coefs))
coefs <- coef_list$posterior_group_coefs[, relevant_cols] %>%
gather("coef", "value") %>%
separate(coef, c("coef","choice","condition"), "_") %>%
mutate(Exp = Exp_name)
chosen <- coefs %>% subset(choice=="Chosen") %>%
group_by(coef) %>% mutate(obs = 1:n()) %>% spread(coef, value) %>% rename(`chosen intercept` = "Intercept", `chosen slope` = "Slope") %>% select(-c(choice))
unchosen <- coefs %>% subset(choice=="Unchosen") %>%
group_by(coef) %>% mutate(obs = 1:n()) %>% spread(coef, value) %>% rename(`unchosen intercept` = "Intercept", `unchosen slope` = "Slope") %>% select(-c(choice))
all_coefs <- chosen %>% merge(unchosen, by=c("Exp", "condition", "obs")) %>% arrange(obs) %>% select(-obs)
return(all_coefs)
}
table3_fits <- function(coef_list, Exp_name){
relevant_cols <- grepl(c("Intercept_"),colnames(coef_list$posterior_group_coefs)) |
grepl(c("Slope_"),colnames(coef_list$posterior_group_coefs))
coefs <- coef_list$posterior_group_coefs[, relevant_cols] %>%
gather("coef", "value") %>%
separate(coef, c("coef","choice","condition"), "_") %>%
mutate(Exp = Exp_name)
chosen <- coefs %>% subset(choice=="Chosen") %>%
group_by(coef) %>% mutate(obs = 1:n()) %>% spread(coef, value) %>% rename(`chosen intercept` = "Intercept", `chosen slope` = "Slope") %>% select(-c(choice))
unchosen <- coefs %>% subset(choice=="Unchosen") %>%
group_by(coef) %>% mutate(obs = 1:n()) %>% spread(coef, value) %>% rename(`unchosen intercept` = "Intercept", `unchosen slope` = "Slope") %>% select(-c(choice))
all_coefs <- chosen %>% merge(unchosen, by=c("Exp", "condition", "obs")) %>% arrange(obs) %>% select(-obs)
return(all_coefs)
}
table3 <- bind_rows(table3_fits(coef_list_Pilot, "Pilot"),
table3_fits(coef_list_Exp1, "Exp. 1"),
table3_fits(coef_list_Exp2, "Exp. 2"),
table3_fits(coef_list_Exp3, "Exp. 3"),
table3_fits(coef_list_Exp4, "Exp. 4"))
View(table3)
unique(table3$condition)
table3 <- bind_rows(table3_fits(coef_list_Pilot, "Pilot"),
table3_fits(coef_list_Exp1, "Experiment 1"),
table3_fits(coef_list_Exp2, "Experiment 2"),
table3_fits(coef_list_Exp3, "Experiment 3"),
table3_fits(coef_list_Exp4, "Experiment 4")) %>%
mutate(condition = case_when(
condition=="Pairs" ~ "None",
condition=="HighRepeat" ~ "more repetitions",
condition=="LowRepeat"  ~ "less repetitions",
condition=="HighReward" ~ "high reward",
condition=="HighReward" ~ "low reward",
condition=="Same" ~ "same painter",
condition=="Diff" ~ "different painter"))
bind_rows(table3_fits(coef_list_Pilot, "Pilot"),
table3_fits(coef_list_Exp1, "Experiment 1"),
table3_fits(coef_list_Exp2, "Experiment 2"),
table3_fits(coef_list_Exp3, "Experiment 3"),
table3_fits(coef_list_Exp4, "Experiment 4")) %>%
mutate(condition = case_when(
condition=="Pairs" ~ "None",
condition=="HighRepeat" ~ "more repetitions",
condition=="LowRepeat"  ~ "less repetitions",
condition=="HighReward" ~ "high reward",
condition=="HighReward" ~ "low reward",
condition=="Same" ~ "same painter",
condition=="Diff" ~ "different painter")) %>%
group_by(Exp, condition) %>%
summarise(median= median(`intercept chosen`),
high_95 = posterior_interval(`intercept chosen`)[1])
bind_rows(table3_fits(coef_list_Pilot, "Pilot"),
table3_fits(coef_list_Exp1, "Experiment 1"),
table3_fits(coef_list_Exp2, "Experiment 2"),
table3_fits(coef_list_Exp3, "Experiment 3"),
table3_fits(coef_list_Exp4, "Experiment 4")) %>%
mutate(condition = case_when(
condition=="Pairs" ~ "None",
condition=="HighRepeat" ~ "more repetitions",
condition=="LowRepeat"  ~ "less repetitions",
condition=="HighReward" ~ "high reward",
condition=="HighReward" ~ "low reward",
condition=="Same" ~ "same painter",
condition=="Diff" ~ "different painter")) %>%
group_by(Exp, condition) %>%
summarise(median= median(`intercept chosen`),
high_95 = posterior_interval(`chosen intercept`)[1])
bind_rows(table3_fits(coef_list_Pilot, "Pilot"),
table3_fits(coef_list_Exp1, "Experiment 1"),
table3_fits(coef_list_Exp2, "Experiment 2"),
table3_fits(coef_list_Exp3, "Experiment 3"),
table3_fits(coef_list_Exp4, "Experiment 4")) %>%
mutate(condition = case_when(
condition=="Pairs" ~ "None",
condition=="HighRepeat" ~ "more repetitions",
condition=="LowRepeat"  ~ "less repetitions",
condition=="HighReward" ~ "high reward",
condition=="HighReward" ~ "low reward",
condition=="Same" ~ "same painter",
condition=="Diff" ~ "different painter")) %>%
group_by(Exp, condition) %>%
summarise(median= median(`chosen intercept`),
high_95 = posterior_interval(`chosen intercept`)[1])
bind_rows(table3_fits(coef_list_Pilot, "Pilot"),
table3_fits(coef_list_Exp1, "Experiment 1"),
table3_fits(coef_list_Exp2, "Experiment 2"),
table3_fits(coef_list_Exp3, "Experiment 3"),
table3_fits(coef_list_Exp4, "Experiment 4")) %>%
mutate(condition = case_when(
condition=="Pairs" ~ "None",
condition=="HighRepeat" ~ "more repetitions",
condition=="LowRepeat"  ~ "less repetitions",
condition=="HighReward" ~ "high reward",
condition=="HighReward" ~ "low reward",
condition=="Same" ~ "same painter",
condition=="Diff" ~ "different painter")) %>%
group_by(Exp, condition) %>%
dplyr::summarise(median= median(`chosen intercept`),
high_95 = posterior_interval(`chosen intercept`)[1])
posterior_interval(table3$`chosen intercept`)
posterior_interval(as.matrix(table3$`chosen intercept`))
posterior_interval(as.matrix(table3$`chosen intercept`))[1]
bind_rows(table3_fits(coef_list_Pilot, "Pilot"),
table3_fits(coef_list_Exp1, "Experiment 1"),
table3_fits(coef_list_Exp2, "Experiment 2"),
table3_fits(coef_list_Exp3, "Experiment 3"),
table3_fits(coef_list_Exp4, "Experiment 4")) %>%
mutate(condition = case_when(
condition=="Pairs" ~ "None",
condition=="HighRepeat" ~ "more repetitions",
condition=="LowRepeat"  ~ "less repetitions",
condition=="HighReward" ~ "high reward",
condition=="HighReward" ~ "low reward",
condition=="Same" ~ "same painter",
condition=="Diff" ~ "different painter")) %>%
group_by(Exp, condition) %>%
dplyr::summarise(median= median(`chosen intercept`),
low_95 = posterior_interval(as.matrix(`chosen intercept`))[1],
high_95 = posterior_interval(as.matrix(table3$`chosen intercept`))[2])
bind_rows(table3_fits(coef_list_Pilot, "Pilot"),
table3_fits(coef_list_Exp1, "Experiment 1"),
table3_fits(coef_list_Exp2, "Experiment 2"),
table3_fits(coef_list_Exp3, "Experiment 3"),
table3_fits(coef_list_Exp4, "Experiment 4")) %>%
mutate(condition = case_when(
condition=="Pairs" ~ "None",
condition=="HighRepeat" ~ "more repetitions",
condition=="LowRepeat"  ~ "less repetitions",
condition=="HighReward" ~ "high reward",
condition=="LowReward" ~ "low reward",
condition=="Same" ~ "same painter",
condition=="Diff" ~ "different painter")) %>%
group_by(Exp, condition) %>%
dplyr::summarise(median= median(`chosen intercept`),
low_95 = posterior_interval(as.matrix(`chosen intercept`))[1],
high_95 = posterior_interval(as.matrix(table3$`chosen intercept`))[2])
bind_rows(table3_fits(coef_list_Pilot, "Pilot"),
table3_fits(coef_list_Exp1, "Experiment 1"),
table3_fits(coef_list_Exp2, "Experiment 2"),
table3_fits(coef_list_Exp3, "Experiment 3"),
table3_fits(coef_list_Exp4, "Experiment 4")) %>%
mutate(condition = case_when(
condition=="Pairs" ~ "None",
condition=="HighRepeat" ~ "more repetitions",
condition=="LowRepeat"  ~ "less repetitions",
condition=="HighReward" ~ "high reward",
condition=="LowReward" ~ "low reward",
condition=="Same" ~ "same painter",
condition=="Diff" ~ "different painter")) %>%
group_by(Exp, condition) %>%
dplyr::summarise(median= median(`chosen intercept`),
low_95 = posterior_interval(as.matrix(`unchosen intercept`))[1],
high_95 = posterior_interval(as.matrix(table3$`unchosen intercept`))[2])
bind_rows(table3_fits(coef_list_Pilot, "Pilot"),
table3_fits(coef_list_Exp1, "Experiment 1"),
table3_fits(coef_list_Exp2, "Experiment 2"),
table3_fits(coef_list_Exp3, "Experiment 3"),
table3_fits(coef_list_Exp4, "Experiment 4")) %>%
mutate(condition = case_when(
condition=="Pairs" ~ "None",
condition=="HighRepeat" ~ "more repetitions",
condition=="LowRepeat"  ~ "less repetitions",
condition=="HighReward" ~ "high reward",
condition=="LowReward" ~ "low reward",
condition=="Same" ~ "same painter",
condition=="Diff" ~ "different painter")) %>%
group_by(Exp, condition) %>%
dplyr::summarise(median= median(`unchosen intercept`),
low_95 = posterior_interval(as.matrix(`unchosen intercept`))[1],
high_95 = posterior_interval(as.matrix(table3$`unchosen intercept`))[2])
bind_rows(table3_fits(coef_list_Pilot, "Pilot"),
table3_fits(coef_list_Exp1, "Experiment 1"),
table3_fits(coef_list_Exp2, "Experiment 2"),
table3_fits(coef_list_Exp3, "Experiment 3"),
table3_fits(coef_list_Exp4, "Experiment 4")) %>%
mutate(condition = case_when(
condition=="Pairs" ~ "None",
condition=="HighRepeat" ~ "more repetitions",
condition=="LowRepeat"  ~ "less repetitions",
condition=="HighReward" ~ "high reward",
condition=="LowReward" ~ "low reward",
condition=="Same" ~ "same painter",
condition=="Diff" ~ "different painter")) %>%
group_by(Exp, condition) %>%
dplyr::summarise(median= median(`unchosen intercept`),
low_95 = posterior_interval(as.matrix(`unchosen intercept`), prob=0.95)[1],
high_95 = posterior_interval(as.matrix(table3$`unchosen intercept`), prob=0.95)[2])
bind_rows(table3_fits(coef_list_Pilot, "Pilot"),
table3_fits(coef_list_Exp1, "Experiment 1"),
table3_fits(coef_list_Exp2, "Experiment 2"),
table3_fits(coef_list_Exp3, "Experiment 3"),
table3_fits(coef_list_Exp4, "Experiment 4")) %>%
mutate(condition = case_when(
condition=="Pairs" ~ "None",
condition=="HighRepeat" ~ "more repetitions",
condition=="LowRepeat"  ~ "less repetitions",
condition=="HighReward" ~ "high reward",
condition=="LowReward" ~ "low reward",
condition=="Same" ~ "same painter",
condition=="Diff" ~ "different painter")) %>%
gather(key="coef",value="value",-c(Exp, condition)) %>%
group_by(Exp, condition, coef) %>%
dplyr::summarise(median= median(value),
low_95 = posterior_interval(as.matrix(value), prob=0.95)[1],
high_95 = posterior_interval(as.matrix(value), prob=0.95)[2])
bind_rows(table3_fits(coef_list_Pilot, "Pilot"),
table3_fits(coef_list_Exp1, "Experiment 1"),
table3_fits(coef_list_Exp2, "Experiment 2"),
table3_fits(coef_list_Exp3, "Experiment 3"),
table3_fits(coef_list_Exp4, "Experiment 4")) %>%
mutate(condition = case_when(
condition=="Pairs" ~ "None",
condition=="HighRepeat" ~ "more repetitions",
condition=="LowRepeat"  ~ "less repetitions",
condition=="HighReward" ~ "high reward",
condition=="LowReward" ~ "low reward",
condition=="Same" ~ "same painter",
condition=="Diff" ~ "different painter")) %>%
gather(key="coef",value="value",-c(Exp, condition)) %>%
group_by(Exp, condition, coef) %>%
dplyr::summarise(median= median(value),
low_95 = posterior_interval(as.matrix(value), prob=0.95)[1],
high_95 = posterior_interval(as.matrix(value), prob=0.95)[2]) %>%
mutate(text = sprintf("%.2f [%.2f %.2f]",median, low_95, high_95)))
bind_rows(table3_fits(coef_list_Pilot, "Pilot"),
table3_fits(coef_list_Exp1, "Experiment 1"),
table3_fits(coef_list_Exp2, "Experiment 2"),
table3_fits(coef_list_Exp3, "Experiment 3"),
table3_fits(coef_list_Exp4, "Experiment 4")) %>%
mutate(condition = case_when(
condition=="Pairs" ~ "None",
condition=="HighRepeat" ~ "more repetitions",
condition=="LowRepeat"  ~ "less repetitions",
condition=="HighReward" ~ "high reward",
condition=="LowReward" ~ "low reward",
condition=="Same" ~ "same painter",
condition=="Diff" ~ "different painter")) %>%
gather(key="coef",value="value",-c(Exp, condition)) %>%
group_by(Exp, condition, coef) %>%
dplyr::summarise(median= median(value),
low_95 = posterior_interval(as.matrix(value), prob=0.95)[1],
high_95 = posterior_interval(as.matrix(value), prob=0.95)[2]) %>%
mutate(text = sprintf("%.2f [%.2f %.2f]",median, low_95, high_95))
bind_rows(table3_fits(coef_list_Pilot, "Pilot"),
table3_fits(coef_list_Exp1, "Experiment 1"),
table3_fits(coef_list_Exp2, "Experiment 2"),
table3_fits(coef_list_Exp3, "Experiment 3"),
table3_fits(coef_list_Exp4, "Experiment 4")) %>%
mutate(condition = case_when(
condition=="Pairs" ~ "None",
condition=="HighRepeat" ~ "more repetitions",
condition=="LowRepeat"  ~ "less repetitions",
condition=="HighReward" ~ "high reward",
condition=="LowReward" ~ "low reward",
condition=="Same" ~ "same painter",
condition=="Diff" ~ "different painter")) %>%
gather(key="coef",value="value",-c(Exp, condition)) %>%
group_by(Exp, condition, coef) %>%
dplyr::summarise(median= median(value),
low_95 = posterior_interval(as.matrix(value), prob=0.95)[1],
high_95 = posterior_interval(as.matrix(value), prob=0.95)[2]) %>%
mutate(text = sprintf("%.2f [%.2f %.2f]",median, low_95, high_95)) %>%
select(-c(median, low_95, high_95))
table3 <- bind_rows(table3_fits(coef_list_Pilot, "Pilot"),
table3_fits(coef_list_Exp1, "Experiment 1"),
table3_fits(coef_list_Exp2, "Experiment 2"),
table3_fits(coef_list_Exp3, "Experiment 3"),
table3_fits(coef_list_Exp4, "Experiment 4")) %>%
mutate(condition = case_when(
condition=="Pairs" ~ "None",
condition=="HighRepeat" ~ "more repetitions",
condition=="LowRepeat"  ~ "less repetitions",
condition=="HighReward" ~ "high reward",
condition=="LowReward" ~ "low reward",
condition=="Same" ~ "same painter",
condition=="Diff" ~ "different painter")) %>%
gather(key="coef",value="value",-c(Exp, condition)) %>%
group_by(Exp, condition, coef) %>%
dplyr::summarise(median= median(value),
low_95 = posterior_interval(as.matrix(value), prob=0.95)[1],
high_95 = posterior_interval(as.matrix(value), prob=0.95)[2]) %>%
mutate(text = sprintf("%.2f [%.2f %.2f]",median, low_95, high_95)) %>%
select(-c(median, low_95, high_95))
View(table3)
table3 <- bind_rows(table3_fits(coef_list_Pilot, "Pilot"),
table3_fits(coef_list_Exp1, "Experiment 1"),
table3_fits(coef_list_Exp2, "Experiment 2"),
table3_fits(coef_list_Exp3, "Experiment 3"),
table3_fits(coef_list_Exp4, "Experiment 4")) %>%
mutate(condition = case_when(
condition=="Pairs" ~ "None",
condition=="HighRepeat" ~ "more repetitions",
condition=="LowRepeat"  ~ "less repetitions",
condition=="HighReward" ~ "high reward",
condition=="LowReward" ~ "low reward",
condition=="Same" ~ "same painter",
condition=="Diff" ~ "different painter"))
View(table3)
View(table2)
table2_fits <- function(coef_list, Exp_name){
coefs <- coef_list$posterior_group_coefs
if(ncol(coefs) > 8){
coefs <- coefs[,c(1:8)]; colnames(coefs) <- c("Intercept", "Choice", "Condition", "Choice:Condition", "Ratings",
"Choice:Ratings", "Ratings:Condition", "Choice:Ratings:Condition")
} else {
coefs <- coefs[,c(1:4)]; colnames(coefs) <- c("Intercept", "Choice", "Ratings", "Choice:Ratings")
}
coefs <- coefs %>% mutate(Exp = Exp_name)
return(coefs)
}
table2 <- bind_rows(table2_fits(coef_list_Pilot, "Pilot"),
table2_fits(coef_list_Exp1, "Experiment 1"),
table2_fits(coef_list_Exp2, "Experiment 2"),
table2_fits(coef_list_Exp3, "Experiment 3"),
table2_fits(coef_list_Exp4, "Experiment 4"))
View(table2)
nros(coef_list$posterior_group_coefs)
nrow(coef_list$posterior_group_coefs)
bind_cols(as.data.frame(Exp=Exp_name), coef_list$posterior_group_coefs)
as.data.frame(Exp=Exp_name)
data.frame(Exp=Exp_name)
bind_cols(data.frame(Exp=Exp_name), coef_list$posterior_group_coefs)
bind_cols(data.frame(Exp=rep(Exp_name,12000)), coef_list$posterior_group_coefs)
table2_fits <- function(coef_list, Exp_name){
coefs <- bind_cols(data.frame(Exp=rep(Exp_name,12000)), coef_list$posterior_group_coefs)
if(ncol(coefs) > 8){
coefs <- coefs[,c(1:8)]; colnames(coefs) <- c("Intercept", "Choice", "Condition", "Choice:Condition", "Ratings",
"Choice:Ratings", "Ratings:Condition", "Choice:Ratings:Condition")
} else {
coefs <- coefs[,c(1:4)]; colnames(coefs) <- c("Intercept", "Choice", "Ratings", "Choice:Ratings")
}
return(coefs)
}
table2 <- bind_rows(table2_fits(coef_list_Pilot, "Pilot"),
table2_fits(coef_list_Exp1, "Experiment 1"),
table2_fits(coef_list_Exp2, "Experiment 2"),
table2_fits(coef_list_Exp3, "Experiment 3"),
table2_fits(coef_list_Exp4, "Experiment 4"))
table2_fits <- function(coef_list, Exp_name){
coefs <- bind_cols(data.frame(Exp=rep(Exp_name,12000)), coef_list$posterior_group_coefs)
if(ncol(coefs) > 8){
coefs <- coefs[,c(1:9)]; colnames(coefs) <- c("Exp","Intercept", "Choice", "Condition", "Choice:Condition", "Ratings",
"Choice:Ratings", "Ratings:Condition", "Choice:Ratings:Condition")
} else {
coefs <- coefs[,c(1:5)]; colnames(coefs) <- c("Exp","Intercept", "Choice", "Ratings", "Choice:Ratings")
}
return(coefs)
}
table2 <- bind_rows(table2_fits(coef_list_Pilot, "Pilot"),
table2_fits(coef_list_Exp1, "Experiment 1"),
table2_fits(coef_list_Exp2, "Experiment 2"),
table2_fits(coef_list_Exp3, "Experiment 3"),
table2_fits(coef_list_Exp4, "Experiment 4"))
View(table2)
coef_list <- []
coef_list <- nan
coef_list <- NaN
table2_fits <- function(coef_list, Exp_name){
coefs <- bind_cols(data.frame(Exp=rep(Exp_name,12000)), coef_list$posterior_group_coefs)
if(ncol(coefs) > 8){
coefs <- coefs[,c(1:9)]; colnames(coefs) <- c("Exp","Intercept", "Choice", "Condition", "Choice:Condition", "Ratings",
"Choice:Ratings", "Ratings:Condition", "Choice:Ratings:Condition")
} else {
coefs <- coefs[,c(1:5)]; colnames(coefs) <- c("Exp","Intercept", "Choice", "Ratings", "Choice:Ratings")
}
return(coefs)
}
table2 <- bind_rows(table2_fits(coef_list_Pilot, "Pilot"),
table2_fits(coef_list_Exp1, "Experiment 1"),
table2_fits(coef_list_Exp2, "Experiment 2"),
table2_fits(coef_list_Exp3, "Experiment 3"),
table2_fits(coef_list_Exp4, "Experiment 4"))
View(table2)
rm(list=ls(all=TRUE))
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning=FALSE)
# If packages are not installed, install. Then, load libraries.
list_of_packages <- c("ggplot2", "Rmisc", "cowplot", "reshape2", "gridExtra", "arm", "mosaic", "stringr", "tidyr", "dplyr", "bayesplot", "rstanarm", "latex2exp", "kableExtra")
new_packages <- list_of_packages[!(list_of_packages %in% installed.packages()[,"Package"])]
if(length(new_packages)) install.packages(new_packages)
lapply(list_of_packages, require, character.only = TRUE)
# Load functions
source("Functions/plotting.R")
source("Functions/modelling.R")
# Figure parameters
fig_size = c(10,10)
fig_type = "eps"  # "eps" # or png
Save_plots <- 1
point_size <- 4.5
point_stroke <- 0.6
line_size <- 1
# Bayesian model params
options(mc.cores = parallel::detectCores())
params <- list()
params$iterations <- 4000
params$chains <- 6
params$warmup <- 2000
params$adapt_delta <- 0.99
# Do you want to run the models or load them?
run_models = 0;
# Load data
load("../data/Clean_data_lists/clean_data_Pilot.RData")
load("../data/Clean_data_lists/clean_data_Exp1.RData")
load("../data/Clean_data_lists/clean_data_Exp2.RData")
load("../data/Clean_data_lists/clean_data_Exp3.RData")
load("../data/Clean_data_lists/clean_data_Exp4.RData")
bind_experiments <- function(phase_types, exps){
all_dfs_list <- list()
for (p in 1:length(phase_types)){
data <- c()
for (i in 1:length(exps)){
curr_data <- eval(parse(text = sprintf("clean_data_%s$%s",exps[i],phase_types[p])))
data <- bind_rows(data,curr_data)
}
all_dfs_list[[p]] <- data
}
names(all_dfs_list) <- phase_types
return(all_dfs_list)
}
phase_types <- names(clean_data_Exp1)
all_exps_list <- bind_experiments(phase_types, c("Pilot", "Exp1", "Exp2", "Exp3", "Exp4"))
n_exps <- length(unique(all_exps_list$final_decisions$Exp))
library("pwr")
library("lme4")
#library("lsr")
# ========================================================
# run simple logistic regressions to predict decision bias
# ========================================================
final_decisions_pilot <- subset(clean_data_Pilot$final_decisions, !is.na(left_chosen))
# run logistic fits for each subject and detect their unchosen intercept
subs <- unique(final_decisions_pilot$PID)
subs_coefs <- data.frame()
for (i in 1:length(subs)){
sub_data <- subset(final_decisions_pilot, PID == subs[i])
m_sub <- glm(data = sub_data,
higher_outcome_chosen ~ chosen_trial_centered * norm_drate_by_outcome,
family = binomial(link = "logit"))
subs_coefs[i,1] <- subs[i]
subs_coefs[i,c(2:5)] <- m_sub$coefficients
}
colnames(subs_coefs) <- c("PID",rownames(as.data.frame(m_sub$coefficients)))
# compute unchosen intercept (intercept coef - chosen_trial coef)
subs_coefs <- mutate(subs_coefs, unchosen_intercept = `(Intercept)` - chosen_trial_centered)
# compute power
compute_power <- function(desired_power,desired_sig_level,data,coef,null_point){
t_stats <- data %>%
dplyr::summarize(
t_value = as.numeric(t.test(!!sym(coef), rep(null_point, n()), paired=TRUE)["statistic"]),
p_value = as.numeric(t.test(!!sym(coef), rep(null_point, n()), paired=TRUE)["p.value"]),
cohens_d = cohensD(x=!!sym(coef),y=rep(null_point, n()),method="paired"),
power = as.numeric(pwr.t.test(n = n(), d = cohens_d, sig.level = desired_sig_level,
type = c("paired"))["power"]),
desired_sample = as.numeric(pwr.t.test(power = desired_power, d = cohens_d,
sig.level = desired_sig_level, type = c("paired"))["n"]))
return(t_stats)
}
power_pilot <- compute_power(0.99, 0.05, subs_coefs, "unchosen_intercept",0)
colnames(power_pilot) <- c("t value", "p value", "Cohen's d", "power in pilot study", "desired sample to get 99% power")
power_pilot %>%
kbl() %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
library("pwr")
library("lme4")
library("lsr")
# ========================================================
# run simple logistic regressions to predict decision bias
# ========================================================
final_decisions_pilot <- subset(clean_data_Pilot$final_decisions, !is.na(left_chosen))
# run logistic fits for each subject and detect their unchosen intercept
subs <- unique(final_decisions_pilot$PID)
subs_coefs <- data.frame()
for (i in 1:length(subs)){
sub_data <- subset(final_decisions_pilot, PID == subs[i])
m_sub <- glm(data = sub_data,
higher_outcome_chosen ~ chosen_trial_centered * norm_drate_by_outcome,
family = binomial(link = "logit"))
subs_coefs[i,1] <- subs[i]
subs_coefs[i,c(2:5)] <- m_sub$coefficients
}
colnames(subs_coefs) <- c("PID",rownames(as.data.frame(m_sub$coefficients)))
# compute unchosen intercept (intercept coef - chosen_trial coef)
subs_coefs <- mutate(subs_coefs, unchosen_intercept = `(Intercept)` - chosen_trial_centered)
# compute power
compute_power <- function(desired_power,desired_sig_level,data,coef,null_point){
t_stats <- data %>%
dplyr::summarize(
t_value = as.numeric(t.test(!!sym(coef), rep(null_point, n()), paired=TRUE)["statistic"]),
p_value = as.numeric(t.test(!!sym(coef), rep(null_point, n()), paired=TRUE)["p.value"]),
cohens_d = cohensD(x=!!sym(coef),y=rep(null_point, n()),method="paired"),
power = as.numeric(pwr.t.test(n = n(), d = cohens_d, sig.level = desired_sig_level,
type = c("paired"))["power"]),
desired_sample = as.numeric(pwr.t.test(power = desired_power, d = cohens_d,
sig.level = desired_sig_level, type = c("paired"))["n"]))
return(t_stats)
}
power_pilot <- compute_power(0.99, 0.05, subs_coefs, "unchosen_intercept",0)
colnames(power_pilot) <- c("t value", "p value", "Cohen's d", "power in pilot study", "desired sample to get 99% power")
power_pilot %>%
kbl() %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
