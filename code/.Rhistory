coef_list_Exp1$posterior_group_coefs[,slope_col]*fake_x[x])
}
predicted_group_draws_list[[c]] <- pred_fake
names(predicted_group_draws_list)[c] <- colnames(coef_list_Exp1$coefs_signs)[c]
}
# now we can compute the median and 95% HDI for every x value
predicted_group_summary_list <- list()
df_x <- data.frame(obs = 1:n, x = fake_x)
for (c in 1:ncol(coef_list_Exp1$coefs_signs)){
df_pred <- predicted_group_draws_list[[c]] %>%
setNames(seq_len(ncol(.))) %>%
tibble::rownames_to_column("posterior_sample") %>%
tidyr::gather_("obs", "fitted", setdiff(names(.), "posterior_sample")) %>%
group_by(obs) %>%
dplyr::summarise(median = median(fitted),
lower = quantile(fitted, 0.025),
upper = quantile(fitted, 0.975)) %>%
mutate(obs = as.numeric(obs)) %>%
left_join(df_x, by="obs") %>% arrange(obs)
predicted_group_summary_list[[c]] <- df_pred
names(predicted_group_summary_list)[c] <- names(predicted_group_draws_list)[c]
}
# line fits
predicted_draws <- data.frame(predicted_group_summary_list$Chosen_Pairs) %>%
mutate(choice = "Chosen pairs") %>%
rbind(mutate(data.frame(predicted_group_summary_list$Unchosen_Pairs),
choice = "Unchosen pairs"))
# model text
choice_model_text <- subset(coef_list_Exp1$summary_group_coefs,
grepl("Intercept_",coef) | grepl("Slope_",coef)) %>%
separate(coef, c("coef","choice","condition"), "_") %>%
mutate(sig = ifelse((Median>0 & low95HDI>0 & high95HDI>0) | (Median<0 & low95HDI<0 & high95HDI<0),"*",""),
median = sprintf("%.2f%s",Median, sig),
text = sprintf("\u03b2(%s %s):\n%.2f [%.2f, %.2f]%s",choice, coef, Median, low95HDI, high95HDI, sig)) %>%
mutate(x = ifelse(choice=="Chosen", -0.5, 0.5),
y = ifelse(choice=="Chosen", 0.8, 0.2))
# plot fit
p2 <- ggplot(predicted_draws, aes(y=median,x=x,group=choice)) +
geom_ribbon(aes(ymin=lower, ymax=upper), fill="#E9E9E9") +
geom_line(aes(y=median, linetype=choice), colour="black", size=linesize*1.5) +
geom_hline(yintercept=0.5, size=linesize, linetype="dashed") +
geom_vline(xintercept=0, size=linesize, linetype="dashed") +
scale_y_continuous(expand=c(0,0), breaks=c(0,0.5,1), limits=c(0,1.025)) +
scale_x_continuous(expand=c(0,0)) +
scale_linetype_manual(values=c("longdash", "solid")) +
theme + point_plot_theme +
theme(legend.position="none",
plot.title = element_text(margin=margin(0,0,30,0))) +
geom_text(subset(choice_model_text, coef=="Intercept"),
mapping=aes(x=x, y=y, group=choice, label=text), size=7) +
labs(y="Predicted p(select S+)",
x="Normalized \u0394ratings (S+ - S0)",
title="Choice model predictions")
outcome_estimation
outcome_estimation
outcome_estimation %>%
mutate(reward = ifelse(reward=="Rewarded", "S+", "S-"),
choice = ifelse(choice=="Chosen", "Schosen", "Sunchosen"))
outcome_estimation %>%
mutate(reward = ifelse(reward=="Rewarded", "S+", "S-"))
estimates <- outcome_estimation %>%
mutate(reward = ifelse(reward=="Rewarded", "S+", "S-"))
ggplot(estimates, aes(y = gain_eval, x = choice)) +
stat_summary_bin(aes(y=gain_eval, fill=reward), fun.y="mean", geom="bar", binwidth=0.2) +
stat_summary(aes(color=reward), fun.data=mean_se, fun.args = list(mult=n_sem), geom="errorbar", width=0.3, size=0.9) +
geom_hline(yintercept=0.5, linetype="dashed", size=linesize) +
scale_y_continuous(expand=c(0,0), breaks=c(0,0.5,1), limits=c(0,1.05)) +
theme +
labs(y="p(estimate as S+)", title="Outcome Estimation") +
theme(
legend.position = c(.82, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.text=element_text(size=18),
axis.title.x=element_blank(),
aspect.ratio=2.2/2,
plot.title = element_text(margin=margin(0,0,30,0))) +
scale_color_manual(values=c("#36875F", "#B34E00")) +
scale_fill_manual(values=c("#54B082", "#D55E00")) +
scale_x_discrete(breaks = c("Rewarded", "Unrewarded"),
labels = c(expression(S[chosen]*"+"), expression(S[chosen]*"0")))
gplot(estimates, aes(y = gain_eval, x = choice)) +
stat_summary_bin(aes(y=gain_eval, fill=reward), fun.y="mean", geom="bar", binwidth=0.2,
position=position_dodge(width=1)) +
geom_point(aes(color=reward), position=position_jitterdodge(dodge.width=1, jitter.width=0.1),
fill="white", shape=21, stroke=0.5, size=1) +
stat_summary(aes(group=reward, color=reward, x=as.numeric(as.factor(choice))+0.13),
fun.data=mean_se, fun.args = list(mult=1),
geom="errorbar", width=0.2, size=0.9, position=position_dodge(width=1)) +
#
#
#   stat_summary_bin(aes(y=gain_eval, fill=reward), fun.y="mean", geom="bar", binwidth=0.2) +
#   stat_summary(aes(color=reward), fun.data=mean_se, fun.args = list(mult=n_sem), geom="errorbar", width=0.3, size=0.9) +
geom_hline(yintercept=0.5, linetype="dashed", size=linesize) +
scale_y_continuous(expand=c(0,0), breaks=c(0,0.5,1), limits=c(0,1.05)) +
theme +
labs(y="p(estimate as S+)", title="Outcome Estimation") +
theme(
legend.position = c(.82, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.text=element_text(size=18),
axis.title.x=element_blank(),
aspect.ratio=2.2/2,
plot.title = element_text(margin=margin(0,0,30,0))) +
scale_color_manual(values=c("#36875F", "#B34E00")) +
scale_fill_manual(values=c("#54B082", "#D55E00")) +
scale_x_discrete(breaks = c("Rewarded", "Unrewarded"),
labels = c(expression(S[chosen]*"+"), expression(S[chosen]*"0")))
ggplot(estimates, aes(y = gain_eval, x = choice)) +
stat_summary_bin(aes(y=gain_eval, fill=reward), fun.y="mean", geom="bar", binwidth=0.2,
position=position_dodge(width=1)) +
geom_point(aes(color=reward), position=position_jitterdodge(dodge.width=1, jitter.width=0.1),
fill="white", shape=21, stroke=0.5, size=1) +
stat_summary(aes(group=reward, color=reward, x=as.numeric(as.factor(choice))+0.13),
fun.data=mean_se, fun.args = list(mult=1),
geom="errorbar", width=0.2, size=0.9, position=position_dodge(width=1)) +
#
#
#   stat_summary_bin(aes(y=gain_eval, fill=reward), fun.y="mean", geom="bar", binwidth=0.2) +
#   stat_summary(aes(color=reward), fun.data=mean_se, fun.args = list(mult=n_sem), geom="errorbar", width=0.3, size=0.9) +
geom_hline(yintercept=0.5, linetype="dashed", size=linesize) +
scale_y_continuous(expand=c(0,0), breaks=c(0,0.5,1), limits=c(0,1.05)) +
theme +
labs(y="p(estimate as S+)", title="Outcome Estimation") +
theme(
legend.position = c(.82, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.text=element_text(size=18),
axis.title.x=element_blank(),
aspect.ratio=2.2/2,
plot.title = element_text(margin=margin(0,0,30,0))) +
scale_color_manual(values=c("#36875F", "#B34E00")) +
scale_fill_manual(values=c("#54B082", "#D55E00")) +
scale_x_discrete(breaks = c("Rewarded", "Unrewarded"),
labels = c(expression(S[chosen]*"+"), expression(S[chosen]*"0")))
ggplot(estimates, aes(y = gain_eval, x = choice)) +
stat_summary_bin(aes(y=gain_eval, fill=reward), fun.y="mean", geom="bar", binwidth=0.2,
position=position_dodge(width=1)) +
geom_point(aes(color=reward), position=position_jitterdodge(dodge.width=1, jitter.width=0.1),
fill="white", shape=21, stroke=0.5, size=1) +
stat_summary(aes(group=reward, color=reward, x=as.numeric(as.factor(choice))+0.13),
fun.data=mean_se, fun.args = list(mult=1),
geom="errorbar", width=0.2, size=0.9, position=position_dodge(width=1)) +
#
#
#   stat_summary_bin(aes(y=gain_eval, fill=reward), fun.y="mean", geom="bar", binwidth=0.2) +
#   stat_summary(aes(color=reward), fun.data=mean_se, fun.args = list(mult=n_sem), geom="errorbar", width=0.3, size=0.9) +
geom_hline(yintercept=0.5, linetype="dashed", size=linesize) +
scale_y_continuous(expand=c(0,0), breaks=c(0,0.5,1), limits=c(0,1.05)) +
theme +
labs(y="p(estimate as S+)", title="Outcome Estimation") +
theme(
legend.position = c(.82, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.text=element_text(size=18),
axis.title.x=element_blank(),
aspect.ratio=2.2/2,
plot.title = element_text(margin=margin(0,0,30,0))) +
scale_color_manual(values=c("#36875F", "#B34E00")) +
scale_fill_manual(values=c("#54B082", "#D55E00"))
ggplot(estimates, aes(y = gain_eval, x = choice)) +
stat_summary_bin(aes(y=gain_eval, fill=reward), fun.y="mean", geom="bar", binwidth=0.2,
position=position_dodge(width=1)) +
stat_summary(aes(color=reward, x=choice),
fun.data=mean_se, fun.args = list(mult=1),
geom="errorbar", width=0.2, size=0.9, position=position_dodge(width=1)) +
#
#
#   stat_summary_bin(aes(y=gain_eval, fill=reward), fun.y="mean", geom="bar", binwidth=0.2) +
#   stat_summary(aes(color=reward), fun.data=mean_se, fun.args = list(mult=n_sem), geom="errorbar", width=0.3, size=0.9) +
geom_hline(yintercept=0.5, linetype="dashed", size=linesize) +
scale_y_continuous(expand=c(0,0), breaks=c(0,0.5,1), limits=c(0,1.05)) +
theme +
labs(y="p(estimate as S+)", title="Outcome Estimation") +
theme(
legend.position = c(.82, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.text=element_text(size=18),
axis.title.x=element_blank(),
aspect.ratio=2.2/2,
plot.title = element_text(margin=margin(0,0,30,0))) +
scale_color_manual(values=c("#36875F", "#B34E00")) +
scale_fill_manual(values=c("#54B082", "#D55E00"))
ggplot(estimates, aes(y = gain_eval, x = choice)) +
stat_summary_bin(aes(y=gain_eval, fill=reward), fun.y="mean", geom="bar", binwidth=0.2,
position=position_dodge(width=1)) +
stat_summary(aes(color=reward, x=choice),
fun.data=mean_se, fun.args = list(mult=1),
geom="errorbar", width=0.2, size=0.9, position=position_dodge(width=1)) +
#
#
#   stat_summary_bin(aes(y=gain_eval, fill=reward), fun.y="mean", geom="bar", binwidth=0.2) +
#   stat_summary(aes(color=reward), fun.data=mean_se, fun.args = list(mult=n_sem), geom="errorbar", width=0.3, size=0.9) +
geom_hline(yintercept=0.5, linetype="dashed", size=linesize) +
scale_y_continuous(expand=c(0,0), breaks=c(0,0.5,1), limits=c(0,1.05)) +
theme +
labs(y="p(estimate as S+)", title="Outcome Estimation") +
theme(
legend.position = c(.82, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.text=element_text(size=18),
axis.title.x=element_blank(),
aspect.ratio=2.2/2,
plot.title = element_text(margin=margin(0,0,30,0))) +
scale_color_manual(values=c("#B34E00", "#36875F")) +
scale_fill_manual(values=c("#D55E00","#54B082")) +
scale_x_discrete(breaks = c("Chosen", "Unchosen"),
labels = c(expression(S[chosen]*"+"), expression(S[chosen]*"0")))
ggplot(estimates, aes(y = gain_eval, x = choice)) +
stat_summary_bin(aes(y=gain_eval, fill=reward), fun.y="mean", geom="bar", binwidth=0.2,
position=position_dodge(width=1)) +
stat_summary(aes(color=reward, x=choice),
fun.data=mean_se, fun.args = list(mult=1),
geom="errorbar", width=0.2, size=0.9, position=position_dodge(width=1)) +
geom_hline(yintercept=0.5, linetype="dashed", size=linesize) +
scale_y_continuous(expand=c(0,0), breaks=c(0,0.5,1), limits=c(0,1.05)) +
theme +
labs(y="p(estimate as S+)", title="Outcome Estimation") +
theme(
legend.position = c(.82, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.text=element_text(size=18),
axis.title.x=element_blank(),
aspect.ratio=2.2/2,
plot.title = element_text(margin=margin(0,0,30,0))) +
scale_color_manual(values=c("#B34E00", "#36875F")) +
scale_fill_manual(values=c("#D55E00","#54B082")) +
scale_x_discrete(breaks = c("Chosen", "Unchosen"),
labels = c(expression(S[chosen]), expression(S[chosen])))
ggplot(estimates, aes(y = gain_eval, x = choice)) +
stat_summary_bin(aes(y=gain_eval, fill=reward), fun.y="mean", geom="bar", binwidth=0.2,
position=position_dodge(width=1)) +
stat_summary(aes(color=reward, x=choice),
fun.data=mean_se, fun.args = list(mult=1),
geom="errorbar", width=0.2, size=0.9, position=position_dodge(width=1)) +
geom_hline(yintercept=0.5, linetype="dashed", size=linesize) +
scale_y_continuous(expand=c(0,0), breaks=c(0,0.5,1), limits=c(0,1.05)) +
theme +
labs(y="p(estimate as S+)", title="Outcome Estimation") +
theme(
legend.position = c(.82, .95),
legend.justification = c("right", "top"),
legend.box.just = "right",
legend.margin = margin(6, 6, 6, 6),
legend.text=element_text(size=18),
axis.title.x=element_blank(),
aspect.ratio=2.2/2,
plot.title = element_text(margin=margin(0,0,30,0))) +
scale_color_manual(values=c("#B34E00", "#36875F")) +
scale_fill_manual(values=c("#D55E00","#54B082")) +
scale_x_discrete(breaks = c("Chosen", "Unchosen"),
labels = c(expression(S[chosen]), expression(S[unchosen])))
# =============================
# Between participants analysis
# =============================
# Compute measures of interest
memory_bias <- clean_data_Exp1$final_decisions %>%
mutate(choice = ifelse(chosen_trial==1, "Chosen", "Unchosen")) %>%
group_by(PID, choice) %>%
dplyr::summarize(p_gain = mean(higher_outcome_chosen, na.rm=1),
pair_acc = mean(pair_acc, na.rm=1)) %>%
spread(choice,p_gain) %>%
mutate(inverse_bias = Chosen - Unchosen)
# Model inverse decision bias and pairs memory
if (run_models==1){
coefs_pair_acc_bias_Exp1 <- run_bias_memory_model(subset(clean_data_Exp1$final_decisions, !is.na(left_chosen)),
"pair_acc",c(),params,"Exp1")
load("../data/Models/Memory_Bias/Between_subs/Model_objects/M_Exp1_memory_bias.RData")
} else {
load("../data/Models/Memory_Bias/Between_subs/Model_objects/M_Exp1_memory_bias.RData")
load("../data/Models/Memory_Bias/Between_subs/Coef_lists/coefs_pair_acc_bias_Exp1.RData")
}
# Present model coefs
pairs_acc_model <- as.data.frame(M_Exp1_memory_bias) %>%
gather(coef, value, `(Intercept)`:sigma) %>%
group_by(coef) %>%
dplyr::summarize(HDI95_low = posterior_interval(as.matrix(value), prob=0.95)[1],
HDI95_high = posterior_interval(as.matrix(value), prob=0.95)[2],
median = median(value)) %>%
mutate(value = sprintf("%.2f [%.2f, %.2f]",median, HDI95_low, HDI95_high)) %>%
dplyr::select(coef, value)
print("between-participants analysis")
pairs_acc_model %>%
kbl() %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
# =============================
# Within participants analysis
# =============================
# For every participant, categorize their deliberation pairs into two groups according to outcome estimations
subs <- unique(clean_data_Exp1$deliberation$PID)
deliberation <- c(); memory <- c(); outcome_evaluation <- c()
for (s in subs){
curr_outcome_eval <- subset(clean_data_Exp1$outcome_evaluation, PID==s)
curr_final_decisions <- subset(clean_data_Exp1$final_decisions, PID==s)
curr_deliberation <- subset(clean_data_Exp1$deliberation, PID==s)
curr_memory <- subset(clean_data_Exp1$memory, PID==s)
# insert outcome evaluation to the deliberation matrix, and add a measure of whether this is a direct or inverse pair (whether the outcomes of chosen and unchosen items within a pair are estimated to be the same or not)
for (t in 1:nrow(curr_deliberation)){
curr_deliberation$gain_eval_chosen[t] <-
curr_outcome_eval$outcome_eval_gain[curr_outcome_eval$stimulus_id==curr_deliberation$chosen_obj[t]]
curr_deliberation$gain_eval_unchosen[t] <-
curr_outcome_eval$outcome_eval_gain[curr_outcome_eval$stimulus_id==curr_deliberation$unchosen_obj[t]]
curr_deliberation$pair_grouping[t] <-
ifelse(curr_deliberation$gain_eval_chosen[t]==curr_deliberation$gain_eval_unchosen[t],
"Direct transfer",
"Inverse transfer")
}
# use deliberation info to assign memory pairs
for (t in 1:nrow(curr_memory)){
curr_memory$pair_type_left[t] <-
curr_deliberation$pair_grouping[curr_deliberation$stimulus_left==curr_memory$stimulus_left[t] |
curr_deliberation$stimulus_right==curr_memory$stimulus_left[t]]
curr_memory$pair_type_right[t] <-
curr_deliberation$pair_grouping[curr_deliberation$stimulus_left==curr_memory$stimulus_right[t] |
curr_deliberation$stimulus_right==curr_memory$stimulus_right[t]]
curr_memory$pair_type_cond[t] <- ifelse(curr_memory$pair_type_left[t]!=curr_memory$pair_type_right[t],
"Direct/Inverse",
ifelse(curr_memory$pair_type_left[t]=="Inverse transfer",
"Inverse transfer",
"Direct transfer"))
}
# bind subjects mats
outcome_evaluation <- bind_rows(outcome_evaluation,curr_outcome_eval)
memory <- bind_rows(memory,curr_memory)
deliberation <- bind_rows(deliberation, curr_deliberation)
}
# Use old trials only because they necessarily include either direct or inverse transfer
memory_per_deliberation <- subset(memory, old_pair==1) %>%
mutate(pair_type_centered = ifelse(pair_type_cond=="Inverse transfer", 1, -1))
# Compute memory means for each deliberation group
memory_per_deliberation_means <- memory_per_deliberation %>%
group_by(PID, pair_type_cond) %>%
dplyr::summarise(pair_acc = mean(pair_acc, na.rm=1)) %>%
group_by(pair_type_cond) %>%
dplyr::summarize(mean = mean(pair_acc),
se = sd(pair_acc)/sqrt(n())) %>%
mutate(`pair memory accuracy` = sprintf("%.2f \u00b1 %.2f",mean, se)) %>%
dplyr::rename(`condition type` = pair_type_cond) %>%
dplyr::select(`condition type`, `pair memory accuracy`)
print("within-participants analysis")
memory_per_deliberation_means %>%
kbl() %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
# Model the effect
if (run_models==1){
M_memory_per_deliberation_Exp1 <- stan_glmer(data = memory_per_deliberation,
pair_acc ~ pair_type_centered + (pair_type_centered | PID),
family = binomial(link="logit"),
adapt_delta = params$adapt_delta,
iter = params$iterations,
chains = params$chains,
warmup = params$warmup)
save(M_memory_per_deliberation_Exp1,
file = "../data/Models/Memory_Bias/Within_subs/M_memory_per_deliberation_Exp1.RData")
} else {
load("../data/Models/Memory_Bias/Within_subs/M_memory_per_deliberation_Exp1.RData")
}
# Present model coefs
memory_pair_type_model <- as.data.frame(M_memory_per_deliberation_Exp1) %>%
gather(coef, value, `(Intercept)`:pair_type_centered) %>%
group_by(coef) %>%
dplyr::summarize(HDI95_low = posterior_interval(as.matrix(value), prob=0.95)[1],
HDI95_high = posterior_interval(as.matrix(value), prob=0.95)[2],
median = median(value)) %>%
mutate(value = sprintf("%.2f [%.2f, %.2f]",median, HDI95_low, HDI95_high)) %>%
dplyr::select(coef,value)
memory_pair_type_model %>%
kbl() %>%
kable_paper("hover", full_width = F, html_font = "Helvetica", position = "left")
point_size <- 4.5
point_stroke <- 0.6
line_size <- 1
# inverse decision bias as a function of pairs memory
memory_model_text <- coefs_pair_acc_bias_Exp1$posterior_draws_per_cond$no_cond %>%
gather(coef, value) %>%
group_by(coef) %>%
dplyr::summarize(Median=median(value),
low95=quantile(value, 0.025),
high95=quantile(value, 0.975)) %>%
mutate(sig = ifelse((Median>0 & low95>0 & high95>0) | (Median<0 & low95<0 & high95<0),"*",""),
x = 0.25,
y = -0.5,
text = sprintf("\u03b2(Memory):\n%.2f [%.2f, %.2f]%s",Median, low95, high95, sig)) %>%
subset(coef=="Slope")
p1 <- ggplot(coefs_pair_acc_bias_Exp1$bias_memory_data, aes(y=bias_diff,x=pair_acc)) +
geom_point(size=point_size, fill="white", shape=21, stroke=point_stroke) +
theme +
point_plot_theme +
geom_ribbon(data = mutate(coefs_pair_acc_bias_Exp1$predicted_summary_list[[1]], bias_diff=median),
aes(ymin=lower, ymax=upper), fill="#DFEBE9") +
geom_line(aes(y=median), data=coefs_pair_acc_bias_Exp1$predicted_summary_list[[1]],
colour="turquoise4", size=line_size*1.5) +
geom_hline(yintercept=0, size=line_size, linetype="dashed") +
geom_vline(xintercept=0.5, size=line_size,  linetype="dashed") +
scale_y_continuous(expand=c(0,0),  breaks=c(-1,0,1), limits=c(-1.025,1.025)) +
scale_x_continuous(expand=c(0,0), breaks=c(0, 0.5, 1), limits=c(-0.025, 1.025)) +
theme(legend.position="none", plot.title = element_text(margin=margin(0,0,30,0))) +
labs(y=expression(atop("Inverse decision bias","p(select "*S[chosen]*"+) - p(select "*S[unchosen]*"+)")),
x="Pairs memory (accuracy)",
title="Between participants") +
geom_text(data=memory_model_text,  mapping=aes(x=x, y=y, label=text), size=8)
memory_per_deliberation <- mutate(memory_per_deliberation, condition=NaN)
ggplot(memory_per_deliberation,
aes(x=pair_type_cond,y=pair_acc)) +
stat_summary_bin(aes(y=pair_acc), fun.y="mean", geom="bar", binwidth=0.2,
position=position_dodge(width=1), fill="grey") +
geom_point(aes(color=factor(condition)), position=position_jitterdodge(dodge.width=1, jitter.width=0.1),
fill="white", shape=21, stroke=point_stroke, size=point_size) +
scale_color_manual(values="black") +
stat_summary(fun.data=mean_se, fun.args = list(mult=n_sem), geom="errorbar",  width=0.1, size=1,
position=position_nudge(0.2), color="turquoise4") +
geom_hline(yintercept=0.5, size=line_size, linetype="dashed") +
scale_y_continuous(expand=c(0,0),  breaks=c(0,0.5,1), limits=c(0,1.025)) +
theme +
theme(legend.position="none",
aspect.ratio=3/2,
plot.title = element_text(margin=margin(0,0,30,0))) +
labs(x = "Type of deliberation pairs",
y="Pairs memory (accuracy)",
title="Within participants")
memory_per_deliberation
memory_per_deliberation_means <- mutate(memory_per_deliberation_means, condition=NaN)
# pairs accuracy per deliberation pair
p2 <- ggplot(memory_per_deliberation_means,
aes(x=pair_type_cond,y=pair_acc)) +
stat_summary_bin(aes(y=pair_acc), fun.y="mean", geom="bar", binwidth=0.2,
position=position_dodge(width=1), fill="grey") +
geom_point(aes(color=factor(condition)), position=position_jitterdodge(dodge.width=1, jitter.width=0.1),
fill="white", shape=21, stroke=point_stroke, size=point_size) +
scale_color_manual(values="black") +
stat_summary(fun.data=mean_se, fun.args = list(mult=n_sem), geom="errorbar",  width=0.1, size=1,
position=position_nudge(0.2), color="turquoise4") +
geom_hline(yintercept=0.5, size=line_size, linetype="dashed") +
scale_y_continuous(expand=c(0,0),  breaks=c(0,0.5,1), limits=c(0,1.025)) +
theme +
theme(legend.position="none",
aspect.ratio=3/2,
plot.title = element_text(margin=margin(0,0,30,0))) +
labs(x = "Type of deliberation pairs",
y="Pairs memory (accuracy)",
title="Within participants")
p2
memory_per_deliberation_means
memory_per_deliberation %>%
group_by(PID, pair_type_cond) %>%
dplyr::summarise(pair_acc = mean(pair_acc, na.rm=1)) %>%
group_by(pair_type_cond) %>%
dplyr::summarize(mean = mean(pair_acc),
se = sd(pair_acc)/sqrt(n())) %>%
mutate(`pair memory accuracy` = sprintf("%.2f \u00b1 %.2f",mean, se)) %>%
dplyr::rename(`condition type` = pair_type_cond) %>%
dplyr::select(`condition type`, `pair memory accuracy`)
memory_per_deliberation %>%
group_by(PID, pair_type_cond) %>%
dplyr::summarise(pair_acc = mean(pair_acc, na.rm=1)) %>%
group_by(pair_type_cond) %>%
dplyr::summarize(mean = mean(pair_acc),
se = sd(pair_acc)/sqrt(n())) %>%
mutate(`pair memory accuracy` = sprintf("%.2f \u00b1 %.2f",mean, se))
memory_per_deliberation %>%
group_by(PID, pair_type_cond) %>%
dplyr::summarise(pair_acc = mean(pair_acc, na.rm=1)) %>%
group_by(pair_type_cond) %>%
dplyr::summarize(mean = mean(pair_acc),
se = sd(pair_acc)/sqrt(n()))
memory_per_deliberation %>%
group_by(PID, pair_type_cond) %>%
dplyr::summarise(pair_acc = mean(pair_acc, na.rm=1))
memory_per_deliberation_subs <- memory_per_deliberation %>%
group_by(PID, pair_type_cond) %>%
dplyr::summarise(pair_acc = mean(pair_acc, na.rm=1))
memory_per_deliberation_subs
memory_per_deliberation_means <- memory_per_deliberation_subs %>%
group_by(pair_type_cond) %>%
dplyr::summarize(mean = mean(pair_acc),
se = sd(pair_acc)/sqrt(n())) %>%
mutate(`pair memory accuracy` = sprintf("%.2f \u00b1 %.2f",mean, se)) %>%
dplyr::rename(`condition type` = pair_type_cond) %>%
dplyr::select(`condition type`, `pair memory accuracy`)
memory_per_deliberation_means
memory_per_deliberation_subs <- mutate(memory_per_deliberation_subs, condition=NaN)
ggplot(memory_per_deliberation_subs,
aes(x=pair_type_cond,y=pair_acc)) +
stat_summary_bin(aes(y=pair_acc), fun.y="mean", geom="bar", binwidth=0.2,
position=position_dodge(width=1), fill="grey") +
geom_point(aes(color=factor(condition)), position=position_jitterdodge(dodge.width=1, jitter.width=0.1),
fill="white", shape=21, stroke=point_stroke, size=point_size) +
scale_color_manual(values="black") +
stat_summary(fun.data=mean_se, fun.args = list(mult=n_sem), geom="errorbar",  width=0.1, size=1,
position=position_nudge(0.2), color="turquoise4") +
geom_hline(yintercept=0.5, size=line_size, linetype="dashed") +
scale_y_continuous(expand=c(0,0),  breaks=c(0,0.5,1), limits=c(0,1.025)) +
theme +
theme(legend.position="none",
aspect.ratio=3/2,
plot.title = element_text(margin=margin(0,0,30,0))) +
labs(x = "Type of deliberation pairs",
y="Pairs memory (accuracy)",
title="Within participants")
